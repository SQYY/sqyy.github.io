<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Integration Zip不安全解压（CVE-2018-1261）漏洞分析</title>
      <link href="/2018/09/20/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2018/09/20/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-漏洞相关信息"><a href="#1-漏洞相关信息" class="headerlink" title="1. 漏洞相关信息"></a>1. 漏洞相关信息</h2><p><strong>漏洞名称</strong>：Spring Integration Zip不安全解压</p><p><strong>漏洞编号</strong>：CVE-2018-1261</p><p><strong>漏洞描述</strong>：在spring-integration-zip.v1.0.1.RELEASE之前的版本中，恶意用户通过在压缩文件中构造包含有特定文件名称的文件（受影响文件格式有bzip2, tar, xz, war, cpio, 7z），应用程序使用spring-integration-zip进行解压时，会导致跨目录任意写入文件漏洞的攻击。进而有可能被Getshell，远程控制。</p><p><strong>漏洞原理</strong>：攻击者可以通过构造一个包含名称带../前缀的文件的压缩包，在spring-integration-zip进行解压时文件跳出解压文件的目录限制，创建文件</p><p><strong>漏洞利用前置条件</strong>：</p><p>1.使用了spring-integration-zip库</p><p>2.接收并解压了来自不可信来源的压缩文件</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><h3 id="2-1-Libraries："><a href="#2-1-Libraries：" class="headerlink" title="2.1 Libraries："></a>2.1 Libraries：</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvcqkzlzjej30xm0mm78v.jpg" alt=""></p><h2 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h2><h3 id="3-1-恶意压缩包文件内容"><a href="#3-1-恶意压缩包文件内容" class="headerlink" title="3.1 恶意压缩包文件内容"></a>3.1 恶意压缩包文件内容</h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqke6logj30ww060408.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqjturymj31eg04otap.jpg" alt=""></p><h3 id="3-2-测试代码如下"><a href="#3-2-测试代码如下" class="headerlink" title="3.2 测试代码如下"></a>3.2 测试代码如下</h3><p>在<code>unZipTransformer.setWorkDirectory(path);</code>设置了解压文件的路径，CVE-2018-1261目录下会生成good.txt文件，而eval文件就会逃出限制，在根目录生成文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.zip.transformer.UnZipTransformer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File path =  <span class="keyword">new</span> File(<span class="string">"./CVE-2018-1261/"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Resource evilResource = resourceLoader.getResource(<span class="string">"classpath:zip-malicious-traversal.zip"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream evilIS = evilResource.getInputStream();</span><br><span class="line">            Message&lt;InputStream&gt; evilMessage = MessageBuilder.withPayload(evilIS).build();</span><br><span class="line">            UnZipTransformer unZipTransformer = <span class="keyword">new</span> UnZipTransformer();</span><br><span class="line">            <span class="comment">//设置解压文件的目录为CVE-2018-1261</span></span><br><span class="line">            unZipTransformer.setWorkDirectory(path);</span><br><span class="line">            unZipTransformer.afterPropertiesSet();</span><br><span class="line">            <span class="comment">//漏洞入口点</span></span><br><span class="line">            unZipTransformer.transform(evilMessage);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中的UnZipTransformer.transform()会调用<code>doZipTransform()</code>来处理压缩包，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqjhigupj31em0do40o.jpg" alt=""></p><p>在遍历压缩包内目录及文件时，回调ZipEntryCallback中的process()对其进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZipUtil.iterate(inputStream, <span class="keyword">new</span> ZipEntryCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(InputStream zipEntryInputStream, ZipEntry zipEntry)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String zipEntryName = zipEntry.getName();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (ZipResultType.FILE.equals(zipResultType)) &#123;</span><br><span class="line">            <span class="keyword">final</span> File tempDir = <span class="keyword">new</span> File(workDirectory, message.getHeaders().getId().toString());</span><br><span class="line">            tempDir.mkdirs(); <span class="comment">//NOSONAR false positive</span></span><br><span class="line">            <span class="keyword">final</span> File destinationFile = <span class="keyword">new</span> File(tempDir, zipEntryName);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (zipEntry.isDirectory()) &#123; ...   &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                SpringZipUtils.copy(zipEntryInputStream, destinationFile);</span><br><span class="line">                uncompressedData.put(zipEntryName, destinationFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>../../../那一串是通过<code>zipEntry.getName()</code>得到的</p><p><code>final File destinationFile = new File(tempDir, zipEntryName);</code>确定解压目录</p><p>接着就是调用copy</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqiumklej31700aa3zr.jpg" alt=""></p><p>获取传过来的输入数据以及从文件系统中的某个文件中获得输入字节，把数据写到destinationFile处</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqh13em8j31kw0woqfq.jpg" alt=""></p><p>要在根目录下创建tmp文件夹</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqgf5wdbj31kw0dp78i.jpg" alt=""></p><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><ul><li><a href="https://pivotal.io/security/cve-2018-1261" target="_blank" rel="noopener">https://pivotal.io/security/cve-2018-1261</a></li><li><a href="https://github.com/spring-projects/spring-integration-extensions/" target="_blank" rel="noopener">https://github.com/spring-projects/spring-integration-extensions/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA代码审计 | 因酷网校在线教育系统</title>
      <link href="/2018/09/06/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/09/06/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h1 id="CMS简介："><a href="#CMS简介：" class="headerlink" title="CMS简介："></a>CMS简介：</h1><p>  &ensp;&ensp;&ensp;因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提供给非商业用途用户使用，是用户体验最好、运营功能最全、性价比最高的在线教育软件。</p><blockquote><p>核心框架—Spring Framework<br> 视图框架—Spring MVC<br> 持久层框架—MyBatis 3</p></blockquote><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h1><ul><li>JDK 1.8.8</li><li>Tomcat 7</li><li>Mysql 5.5</li><li>maven 3.5.3</li><li>IntelliJ IDEA 2018.01</li></ul><h1 id="系统安装："><a href="#系统安装：" class="headerlink" title="系统安装："></a>系统安装：</h1><p><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">下载地址：</a><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">http://down.admin5.com/jsp/132874.html</a></p><p>1、首先导入源码，修改相关的配置信息，注意要和数据库的信息相对应</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1rrrpruj31kw0re446.jpg" alt=""></p><p>2、在pom.xml中把端口号改成8080，这个可根据自己的实际情况去修改，我这里端口设置的是8080，所以端口号改成8080</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1rzzs17j311e0hyad5.jpg" alt=""></p><p>3、配置Tomcat</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1sjkam9j31kw0dngog.jpg" alt=""></p><p>4、导入项目时会下载maven下的包，启动时会读取配置文件，所以刚刚导入项目和运行Tomcat时都会有一些慢</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1srwjxpj31kw0rg45y.jpg" alt=""></p><h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><h2 id="1、maven结构："><a href="#1、maven结构：" class="headerlink" title="1、maven结构："></a>1、maven结构：</h2><ul><li><code>src/main/java</code>：是java的代码目录</li><li><code>src/main/resources</code>：是资源目录，放一些配置文件，如properties、spring-mvc.xml等</li><li><code>src/main/webapp</code>：是传统项目的WebContent目录</li></ul><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1t65wa3j30e00p40um.jpg" alt=""></p><h2 id="2、Mybatis："><a href="#2、Mybatis：" class="headerlink" title="2、Mybatis："></a>2、Mybatis：</h2><ul><li><code>Mybatis</code>是作为一款半自动化的持久层框架，因为sql语句都要我们自己手动编写还要注意安全问题，所以Mybatis在一定程度上帮我们避免了这些问题</li><li>但是Mybatis不意味着一定的安全，它总共有两个参数#<code>{id}</code>和<code>${id}</code></li></ul><blockquote><p><code>#{id}</code>：相当于JDBC中的PreparedStatement，预编译处理参数，可以有效的避免注入<br><code>${id}</code>：是未经过预编译，仅仅取输出变量的值</p></blockquote><h2 id="3、Spring-MVC工作流程："><a href="#3、Spring-MVC工作流程：" class="headerlink" title="3、Spring MVC工作流程："></a>3、Spring MVC工作流程：</h2><p>1.用户发送http请求给前端控制器(DispatcherServlet)，前端控制器(DispatcherServlet)接到http请求后查询HandlerMapping，然后选择合适的控制器(Controller)。</p><p>2.控制器(Controller)根据不同的业务逻辑调用不同的服务方法／业务对象来获取模型数据(Model),并返回ModelAndView(模型数据和逻辑视图名)给前端控制器(DispatcherServlet)。</p><p>3.前端控制器(DispatcherServlet)根据返回的逻辑视图名，在ViewResolver的帮助下，选择相应的视图(View)进行渲染。</p><p>4.当View确定后，前端控制器(DispatcherServlet)就把模型数据传给视图(View)，以便渲染视图，响应用户的发出的请求。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1tpzqncj31aw0o6dks.jpg" alt=""></p><h2 id="4、Spring："><a href="#4、Spring：" class="headerlink" title="4、Spring："></a>4、Spring：</h2><p>充当了管理容器的角色，用来管理Spring MVC和Mybatis工作的，充当程序中的桥梁或者说管理者</p><h3 id="Spring的两大核心"><a href="#Spring的两大核心" class="headerlink" title="Spring的两大核心"></a>Spring的两大核心</h3><blockquote><p>控制反转（IoC）/依赖注入（DI）<br>面向切面编程（AOP）</p><ul><li>可以与第三方框架良好整合，降低框架的使用难度，提供对各种优秀框架的支持，如Struts、Hibernate等</li><li>降低Java EE API的使用难度，可以通过Spring建议封装</li><li>依赖注入特性将组件透明化，降低耦合度</li></ul></blockquote><h1 id="源码审计："><a href="#源码审计：" class="headerlink" title="源码审计："></a>源码审计：</h1><p>这里只是抛砖引玉给大家讲一下java代码审计的流程，基于SSM框架的一个思路，如果大家有时间可以深入挖掘一下这套程序，一定会有比较多的收获</p><h2 id="1、XSS"><a href="#1、XSS" class="headerlink" title="1、XSS"></a>1、XSS</h2><p>漏洞发生在搜索课程名称，我们定位到<code>CourseController.java</code>这里</p><p><code>@Autowired注解</code>是自动连接属性传递的时，Spring会将这些传递过来的值或者引用自动分配给那些属性以便我们利用，这里我们可以调用<code>CourseService</code>接口里面的方法<br>跟进接口，可以看到定义接口的一些方法，我们可以找到查询课程相关的接口，其中第61行<code>queryCourseList接口</code>是根据不同条件查询课程列表</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1xuxg0nj31h00niq83.jpg" alt=""></p><p>再根据查询相关的接口在定义接口的实现类里查询具体实现的方法，如49行，在<code>CourseMapper</code>中进行数据库查询，直接返回一个list集合</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1uosbh5j31g20u2gs2.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1uubmcvj31fg0nmn24.jpg" alt=""></p><p>这里是<code>CourseMapper</code>中对应查询queryCourseList的sql语句</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1v1mpwgj31kw06gwha.jpg" alt=""></p><p>然后直接将内容返回到前台的页面上，其实<code>${queryCourse.courseName}</code>是一个EL表达式，代表queryCourse这个实体类下面courseName的值，就是我们查询课程的内容</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuokdlc205j314u0godjq.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1yu3uyxj31kw0hrwku.jpg" alt=""></p><h2 id="2、越权漏洞"><a href="#2、越权漏洞" class="headerlink" title="2、越权漏洞"></a>2、越权漏洞</h2><p>漏洞触发点<code>UserController.java</code></p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1z3u3gqj31kw0mq794.jpg" alt=""></p><p>我们跟进定义的接口，并进入接口的实现类来看看修改用户信息内容中是否有用户权限判断</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1zccnlxj30xy05smxq.jpg" alt=""></p><p>第91行，接口实现类中并未做任何用户身份合法性的校验，对请求没进行权限控制</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1zjcz8oj30ye0acdhi.jpg" alt=""></p><p>直接引用mapper文件更新信息</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1zs0tbcj30ye0acdhi.jpg" alt=""></p><p>这里直接贴图，抓包修改对应的user.userId</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo201a907j31kw0kswkp.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo207sxstj30pe0pa75p.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20e76ahj31kw0d2n5c.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo20jffpij31jq0zctco.jpg" alt=""></p><h2 id="3、SQL注入漏洞"><a href="#3、SQL注入漏洞" class="headerlink" title="3、SQL注入漏洞"></a>3、SQL注入漏洞</h2><p><code>AdminArticleController.java</code>删除文章页面，从前台接收articelId参数</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20sd4jmj318k0k0djs.jpg" alt=""></p><p>接口和接口实现类</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20xvda4j312s0eemz5.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo219ayg7j31au03gt9d.jpg" alt=""></p><p>关键点在这里，我们上面提过Mybatis用${}直接拼接，会产生注入</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo21fxd47j316w04idgv.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo21piumuj31kw0byaf6.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo21vkuvbj30y40bygp7.jpg" alt=""></p><p>类似的注入点和其他漏洞还有很多，只要大家细心就会找到的。这里只是提出三个比较有代表性的漏洞举个例子，让大家对SSM框架的审计有一个思路。</p>]]></content>
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
